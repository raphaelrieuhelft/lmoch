node HalfAdder (a, b : bool) returns (sum, carry : bool);
let
  sum = if a and b then false else a or b;
  carry = a and b;
tel

node FullAdder (a, b, c : bool) returns (sum, carry : bool);
var s1,c1,c2:bool;
let
  (s1, c1) = HalfAdder (a, b);
  (sum, c2) = HalfAdder (c, s1);
  carry = c1 or c2;
tel

node Add2 (a0, a1, b0, b1, c: bool) returns (out0, out1: bool);
var c0, c1 : bool;
let
  (out0, c0) = FullAdder(a0, b0, c);
  (out1, c1) = FullAdder(a1, b1, c0);
tel

node Inc2 (x0, x1: bool) returns (out0, out1: bool);
let
  (out0, out1) = Add2(x0, x1, true, false, false);
tel

node int_of_bit(x: bool) returns (out: int);
let
  out = if x then 1 else 0;
tel

node int_of_2bits(x0, x1: bool) returns (out: int);
let
  out = int_of_bit(x0) + 2 * (int_of_bit(x1));
tel

node check () returns (ok: bool);
var cpt: int; x0, x1: bool;
let
  cpt = 0 -> if (pre cpt = 3) then 0 else pre cpt + 1;
  (x0, x1) = (false, false) -> pre (Inc2(x0, x1));
  ok = cpt = int_of_2bits(x0, x1);
tel