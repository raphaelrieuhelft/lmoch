open Aez
open Smt

module BMC_solver = Smt.Make(struct end)
module Kind_solver = Smt.Make(struct end)

exception FalseProperty of int
exception TrueProperty of int

let declare_symbol name t_in t_out =
	let x = Hstring.make name in (* creation dâ€™un symbole *)
	Symbol.declare x t_in t_out; (* declaration de son type *)
	x

let kind delta_incr p_incr =
	let k = ref 0 in
	let n = Term.make_app (declare_symbol "n" [] Type.type_int) [] in
	let n_plus_k = ref n in
	let f_base = ref (p_incr (Term.make_int (Num.Int 0))) in
	BMC_solver.assume ~id:0 (delta_incr (Term.make_int (Num.Int 0)));
	BMC_solver.check();
	Kind_solver.assume ~id:0 (Formula.make_lit Formula.Lt [Term.make_int (Num.Int 0); n]);
	Kind_solver.assume ~id:0 (delta_incr !n_plus_k);
	Kind_solver.assume ~id:0 (p_incr !n_plus_k);
	Kind_solver.check();
	try (while true do
		incr k;
		n_plus_k := Term.make_arith Term.Plus !n_plus_k (Term.make_int (Num.Int 1));
		f_base := Formula.make Formula.And [!f_base; p_incr (Term.make_int (Num.Int !k))];
		BMC_solver.assume ~id:0 (delta_incr (Term.make_int (Num.Int !k)));
		if not (BMC_solver.entails ~id:0 !f_base;) then raise (FalseProperty !k)
		else begin
			(*Formula.print Format.std_formatter (Formula.make Formula.And [(delta_incr !n_plus_k); (Formula.make_lit Formula.Lt [Term.make_int (Num.Int 0); n])]);
			Format.printf "@.";*)
			Kind_solver.assume ~id:0 (delta_incr !n_plus_k);
			Kind_solver.check();
			let p_next = p_incr !n_plus_k in
			if Kind_solver.entails ~id:0 p_next then ((*Formula.print Format.std_formatter p_next;*) raise (TrueProperty !k))
			else Kind_solver.assume ~id:0 p_next
		end
		done
	)
	with 
	  | TrueProperty k -> 
	    Format.printf "TRUE PROPERTY@.";
		Format.printf "Proven with a %i-induction.@." k
	  | FalseProperty k -> 
	    Format.printf "FALSE PROPERTY@.";
		Format.printf "Base case failed for n = %i.@." k

(*Beginning autogenerated proof*) 

let c0__30 = declare_symbol "c0__30" [ Type.type_int ] Type.type_bool
let s0__22 = declare_symbol "s0__22" [ Type.type_int ] Type.type_bool
let b0__38 = declare_symbol "b0__38" [ Type.type_int ] Type.type_bool
let c1__31 = declare_symbol "c1__31" [ Type.type_int ] Type.type_bool
let s1__23 = declare_symbol "s1__23" [ Type.type_int ] Type.type_bool
let b1__39 = declare_symbol "b1__39" [ Type.type_int ] Type.type_bool
let c2__32 = declare_symbol "c2__32" [ Type.type_int ] Type.type_bool
let s2__24 = declare_symbol "s2__24" [ Type.type_int ] Type.type_bool
let b2__40 = declare_symbol "b2__40" [ Type.type_int ] Type.type_bool
let c3__33 = declare_symbol "c3__33" [ Type.type_int ] Type.type_bool
let s3__25 = declare_symbol "s3__25" [ Type.type_int ] Type.type_bool
let b3__41 = declare_symbol "b3__41" [ Type.type_int ] Type.type_bool
let c4__34 = declare_symbol "c4__34" [ Type.type_int ] Type.type_bool
let s4__26 = declare_symbol "s4__26" [ Type.type_int ] Type.type_bool
let b4__42 = declare_symbol "b4__42" [ Type.type_int ] Type.type_bool
let c5__35 = declare_symbol "c5__35" [ Type.type_int ] Type.type_bool
let s5__27 = declare_symbol "s5__27" [ Type.type_int ] Type.type_bool
let b5__43 = declare_symbol "b5__43" [ Type.type_int ] Type.type_bool
let c6__36 = declare_symbol "c6__36" [ Type.type_int ] Type.type_bool
let s6__28 = declare_symbol "s6__28" [ Type.type_int ] Type.type_bool
let b6__44 = declare_symbol "b6__44" [ Type.type_int ] Type.type_bool
let c7__37 = declare_symbol "c7__37" [ Type.type_int ] Type.type_bool
let s7__29 = declare_symbol "s7__29" [ Type.type_int ] Type.type_bool
let b7__45 = declare_symbol "b7__45" [ Type.type_int ] Type.type_bool
let ok__21 = declare_symbol "ok__21" [ Type.type_int ] Type.type_bool
let aux__98 = declare_symbol "aux__98" [ Type.type_int ] Type.type_bool
let aux__97 = declare_symbol "aux__97" [ Type.type_int ] Type.type_bool
let aux__96 = declare_symbol "aux__96" [ Type.type_int ] Type.type_bool
let aux__95 = declare_symbol "aux__95" [ Type.type_int ] Type.type_bool
let aux__94 = declare_symbol "aux__94" [ Type.type_int ] Type.type_bool
let aux__93 = declare_symbol "aux__93" [ Type.type_int ] Type.type_bool
let aux__92 = declare_symbol "aux__92" [ Type.type_int ] Type.type_bool
let aux__91 = declare_symbol "aux__91" [ Type.type_int ] Type.type_bool
let aux__90 = declare_symbol "aux__90" [ Type.type_int ] Type.type_bool
let fulladder_a__157 = declare_symbol "fulladder_a__157" [ Type.type_int ] Type.type_bool
let fulladder_b__159 = declare_symbol "fulladder_b__159" [ Type.type_int ] Type.type_bool
let fulladder_c__149 = declare_symbol "fulladder_c__149" [ Type.type_int ] Type.type_bool
let fulladder_c1__140 = declare_symbol "fulladder_c1__140" [ Type.type_int ] Type.type_bool
let fulladder_s1__142 = declare_symbol "fulladder_s1__142" [ Type.type_int ] Type.type_bool
let fulladder_c2__144 = declare_symbol "fulladder_c2__144" [ Type.type_int ] Type.type_bool
let fulladder_sum__113 = declare_symbol "fulladder_sum__113" [ Type.type_int ] Type.type_bool
let fulladder_carry__114 = declare_symbol "fulladder_carry__114" [ Type.type_int ] Type.type_bool
let fulladder_aux__147 = declare_symbol "fulladder_aux__147" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__148 = declare_symbol "fulladder_halfadder_a__148" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__150 = declare_symbol "fulladder_halfadder_b__150" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__146 = declare_symbol "fulladder_halfadder_sum__146" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__145 = declare_symbol "fulladder_halfadder_carry__145" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__152 = declare_symbol "fulladder_halfadder_aux__152" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__153 = declare_symbol "fulladder_halfadder_xor_a__153" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__154 = declare_symbol "fulladder_halfadder_xor_b__154" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__151 = declare_symbol "fulladder_halfadder_xor_out__151" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__155 = declare_symbol "fulladder_halfadder_xor_aux__155" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__156 = declare_symbol "fulladder_halfadder_a__156" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__158 = declare_symbol "fulladder_halfadder_b__158" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__143 = declare_symbol "fulladder_halfadder_sum__143" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__141 = declare_symbol "fulladder_halfadder_carry__141" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__161 = declare_symbol "fulladder_halfadder_aux__161" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__162 = declare_symbol "fulladder_halfadder_xor_a__162" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__163 = declare_symbol "fulladder_halfadder_xor_b__163" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__160 = declare_symbol "fulladder_halfadder_xor_out__160" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__164 = declare_symbol "fulladder_halfadder_xor_aux__164" [ Type.type_int ] Type.type_bool
let fulladder_a__182 = declare_symbol "fulladder_a__182" [ Type.type_int ] Type.type_bool
let fulladder_b__184 = declare_symbol "fulladder_b__184" [ Type.type_int ] Type.type_bool
let fulladder_c__174 = declare_symbol "fulladder_c__174" [ Type.type_int ] Type.type_bool
let fulladder_c1__165 = declare_symbol "fulladder_c1__165" [ Type.type_int ] Type.type_bool
let fulladder_s1__167 = declare_symbol "fulladder_s1__167" [ Type.type_int ] Type.type_bool
let fulladder_c2__169 = declare_symbol "fulladder_c2__169" [ Type.type_int ] Type.type_bool
let fulladder_sum__111 = declare_symbol "fulladder_sum__111" [ Type.type_int ] Type.type_bool
let fulladder_carry__112 = declare_symbol "fulladder_carry__112" [ Type.type_int ] Type.type_bool
let fulladder_aux__172 = declare_symbol "fulladder_aux__172" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__173 = declare_symbol "fulladder_halfadder_a__173" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__175 = declare_symbol "fulladder_halfadder_b__175" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__171 = declare_symbol "fulladder_halfadder_sum__171" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__170 = declare_symbol "fulladder_halfadder_carry__170" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__177 = declare_symbol "fulladder_halfadder_aux__177" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__178 = declare_symbol "fulladder_halfadder_xor_a__178" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__179 = declare_symbol "fulladder_halfadder_xor_b__179" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__176 = declare_symbol "fulladder_halfadder_xor_out__176" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__180 = declare_symbol "fulladder_halfadder_xor_aux__180" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__181 = declare_symbol "fulladder_halfadder_a__181" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__183 = declare_symbol "fulladder_halfadder_b__183" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__168 = declare_symbol "fulladder_halfadder_sum__168" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__166 = declare_symbol "fulladder_halfadder_carry__166" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__186 = declare_symbol "fulladder_halfadder_aux__186" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__187 = declare_symbol "fulladder_halfadder_xor_a__187" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__188 = declare_symbol "fulladder_halfadder_xor_b__188" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__185 = declare_symbol "fulladder_halfadder_xor_out__185" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__189 = declare_symbol "fulladder_halfadder_xor_aux__189" [ Type.type_int ] Type.type_bool
let fulladder_a__207 = declare_symbol "fulladder_a__207" [ Type.type_int ] Type.type_bool
let fulladder_b__209 = declare_symbol "fulladder_b__209" [ Type.type_int ] Type.type_bool
let fulladder_c__199 = declare_symbol "fulladder_c__199" [ Type.type_int ] Type.type_bool
let fulladder_c1__190 = declare_symbol "fulladder_c1__190" [ Type.type_int ] Type.type_bool
let fulladder_s1__192 = declare_symbol "fulladder_s1__192" [ Type.type_int ] Type.type_bool
let fulladder_c2__194 = declare_symbol "fulladder_c2__194" [ Type.type_int ] Type.type_bool
let fulladder_sum__109 = declare_symbol "fulladder_sum__109" [ Type.type_int ] Type.type_bool
let fulladder_carry__110 = declare_symbol "fulladder_carry__110" [ Type.type_int ] Type.type_bool
let fulladder_aux__197 = declare_symbol "fulladder_aux__197" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__198 = declare_symbol "fulladder_halfadder_a__198" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__200 = declare_symbol "fulladder_halfadder_b__200" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__196 = declare_symbol "fulladder_halfadder_sum__196" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__195 = declare_symbol "fulladder_halfadder_carry__195" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__202 = declare_symbol "fulladder_halfadder_aux__202" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__203 = declare_symbol "fulladder_halfadder_xor_a__203" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__204 = declare_symbol "fulladder_halfadder_xor_b__204" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__201 = declare_symbol "fulladder_halfadder_xor_out__201" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__205 = declare_symbol "fulladder_halfadder_xor_aux__205" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__206 = declare_symbol "fulladder_halfadder_a__206" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__208 = declare_symbol "fulladder_halfadder_b__208" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__193 = declare_symbol "fulladder_halfadder_sum__193" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__191 = declare_symbol "fulladder_halfadder_carry__191" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__211 = declare_symbol "fulladder_halfadder_aux__211" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__212 = declare_symbol "fulladder_halfadder_xor_a__212" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__213 = declare_symbol "fulladder_halfadder_xor_b__213" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__210 = declare_symbol "fulladder_halfadder_xor_out__210" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__214 = declare_symbol "fulladder_halfadder_xor_aux__214" [ Type.type_int ] Type.type_bool
let fulladder_a__232 = declare_symbol "fulladder_a__232" [ Type.type_int ] Type.type_bool
let fulladder_b__234 = declare_symbol "fulladder_b__234" [ Type.type_int ] Type.type_bool
let fulladder_c__224 = declare_symbol "fulladder_c__224" [ Type.type_int ] Type.type_bool
let fulladder_c1__215 = declare_symbol "fulladder_c1__215" [ Type.type_int ] Type.type_bool
let fulladder_s1__217 = declare_symbol "fulladder_s1__217" [ Type.type_int ] Type.type_bool
let fulladder_c2__219 = declare_symbol "fulladder_c2__219" [ Type.type_int ] Type.type_bool
let fulladder_sum__107 = declare_symbol "fulladder_sum__107" [ Type.type_int ] Type.type_bool
let fulladder_carry__108 = declare_symbol "fulladder_carry__108" [ Type.type_int ] Type.type_bool
let fulladder_aux__222 = declare_symbol "fulladder_aux__222" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__223 = declare_symbol "fulladder_halfadder_a__223" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__225 = declare_symbol "fulladder_halfadder_b__225" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__221 = declare_symbol "fulladder_halfadder_sum__221" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__220 = declare_symbol "fulladder_halfadder_carry__220" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__227 = declare_symbol "fulladder_halfadder_aux__227" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__228 = declare_symbol "fulladder_halfadder_xor_a__228" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__229 = declare_symbol "fulladder_halfadder_xor_b__229" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__226 = declare_symbol "fulladder_halfadder_xor_out__226" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__230 = declare_symbol "fulladder_halfadder_xor_aux__230" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__231 = declare_symbol "fulladder_halfadder_a__231" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__233 = declare_symbol "fulladder_halfadder_b__233" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__218 = declare_symbol "fulladder_halfadder_sum__218" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__216 = declare_symbol "fulladder_halfadder_carry__216" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__236 = declare_symbol "fulladder_halfadder_aux__236" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__237 = declare_symbol "fulladder_halfadder_xor_a__237" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__238 = declare_symbol "fulladder_halfadder_xor_b__238" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__235 = declare_symbol "fulladder_halfadder_xor_out__235" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__239 = declare_symbol "fulladder_halfadder_xor_aux__239" [ Type.type_int ] Type.type_bool
let fulladder_a__257 = declare_symbol "fulladder_a__257" [ Type.type_int ] Type.type_bool
let fulladder_b__259 = declare_symbol "fulladder_b__259" [ Type.type_int ] Type.type_bool
let fulladder_c__249 = declare_symbol "fulladder_c__249" [ Type.type_int ] Type.type_bool
let fulladder_c1__240 = declare_symbol "fulladder_c1__240" [ Type.type_int ] Type.type_bool
let fulladder_s1__242 = declare_symbol "fulladder_s1__242" [ Type.type_int ] Type.type_bool
let fulladder_c2__244 = declare_symbol "fulladder_c2__244" [ Type.type_int ] Type.type_bool
let fulladder_sum__105 = declare_symbol "fulladder_sum__105" [ Type.type_int ] Type.type_bool
let fulladder_carry__106 = declare_symbol "fulladder_carry__106" [ Type.type_int ] Type.type_bool
let fulladder_aux__247 = declare_symbol "fulladder_aux__247" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__248 = declare_symbol "fulladder_halfadder_a__248" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__250 = declare_symbol "fulladder_halfadder_b__250" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__246 = declare_symbol "fulladder_halfadder_sum__246" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__245 = declare_symbol "fulladder_halfadder_carry__245" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__252 = declare_symbol "fulladder_halfadder_aux__252" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__253 = declare_symbol "fulladder_halfadder_xor_a__253" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__254 = declare_symbol "fulladder_halfadder_xor_b__254" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__251 = declare_symbol "fulladder_halfadder_xor_out__251" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__255 = declare_symbol "fulladder_halfadder_xor_aux__255" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__256 = declare_symbol "fulladder_halfadder_a__256" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__258 = declare_symbol "fulladder_halfadder_b__258" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__243 = declare_symbol "fulladder_halfadder_sum__243" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__241 = declare_symbol "fulladder_halfadder_carry__241" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__261 = declare_symbol "fulladder_halfadder_aux__261" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__262 = declare_symbol "fulladder_halfadder_xor_a__262" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__263 = declare_symbol "fulladder_halfadder_xor_b__263" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__260 = declare_symbol "fulladder_halfadder_xor_out__260" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__264 = declare_symbol "fulladder_halfadder_xor_aux__264" [ Type.type_int ] Type.type_bool
let fulladder_a__282 = declare_symbol "fulladder_a__282" [ Type.type_int ] Type.type_bool
let fulladder_b__284 = declare_symbol "fulladder_b__284" [ Type.type_int ] Type.type_bool
let fulladder_c__274 = declare_symbol "fulladder_c__274" [ Type.type_int ] Type.type_bool
let fulladder_c1__265 = declare_symbol "fulladder_c1__265" [ Type.type_int ] Type.type_bool
let fulladder_s1__267 = declare_symbol "fulladder_s1__267" [ Type.type_int ] Type.type_bool
let fulladder_c2__269 = declare_symbol "fulladder_c2__269" [ Type.type_int ] Type.type_bool
let fulladder_sum__103 = declare_symbol "fulladder_sum__103" [ Type.type_int ] Type.type_bool
let fulladder_carry__104 = declare_symbol "fulladder_carry__104" [ Type.type_int ] Type.type_bool
let fulladder_aux__272 = declare_symbol "fulladder_aux__272" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__273 = declare_symbol "fulladder_halfadder_a__273" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__275 = declare_symbol "fulladder_halfadder_b__275" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__271 = declare_symbol "fulladder_halfadder_sum__271" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__270 = declare_symbol "fulladder_halfadder_carry__270" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__277 = declare_symbol "fulladder_halfadder_aux__277" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__278 = declare_symbol "fulladder_halfadder_xor_a__278" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__279 = declare_symbol "fulladder_halfadder_xor_b__279" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__276 = declare_symbol "fulladder_halfadder_xor_out__276" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__280 = declare_symbol "fulladder_halfadder_xor_aux__280" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__281 = declare_symbol "fulladder_halfadder_a__281" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__283 = declare_symbol "fulladder_halfadder_b__283" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__268 = declare_symbol "fulladder_halfadder_sum__268" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__266 = declare_symbol "fulladder_halfadder_carry__266" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__286 = declare_symbol "fulladder_halfadder_aux__286" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__287 = declare_symbol "fulladder_halfadder_xor_a__287" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__288 = declare_symbol "fulladder_halfadder_xor_b__288" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__285 = declare_symbol "fulladder_halfadder_xor_out__285" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__289 = declare_symbol "fulladder_halfadder_xor_aux__289" [ Type.type_int ] Type.type_bool
let fulladder_a__307 = declare_symbol "fulladder_a__307" [ Type.type_int ] Type.type_bool
let fulladder_b__309 = declare_symbol "fulladder_b__309" [ Type.type_int ] Type.type_bool
let fulladder_c__299 = declare_symbol "fulladder_c__299" [ Type.type_int ] Type.type_bool
let fulladder_c1__290 = declare_symbol "fulladder_c1__290" [ Type.type_int ] Type.type_bool
let fulladder_s1__292 = declare_symbol "fulladder_s1__292" [ Type.type_int ] Type.type_bool
let fulladder_c2__294 = declare_symbol "fulladder_c2__294" [ Type.type_int ] Type.type_bool
let fulladder_sum__101 = declare_symbol "fulladder_sum__101" [ Type.type_int ] Type.type_bool
let fulladder_carry__102 = declare_symbol "fulladder_carry__102" [ Type.type_int ] Type.type_bool
let fulladder_aux__297 = declare_symbol "fulladder_aux__297" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__298 = declare_symbol "fulladder_halfadder_a__298" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__300 = declare_symbol "fulladder_halfadder_b__300" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__296 = declare_symbol "fulladder_halfadder_sum__296" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__295 = declare_symbol "fulladder_halfadder_carry__295" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__302 = declare_symbol "fulladder_halfadder_aux__302" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__303 = declare_symbol "fulladder_halfadder_xor_a__303" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__304 = declare_symbol "fulladder_halfadder_xor_b__304" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__301 = declare_symbol "fulladder_halfadder_xor_out__301" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__305 = declare_symbol "fulladder_halfadder_xor_aux__305" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__306 = declare_symbol "fulladder_halfadder_a__306" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__308 = declare_symbol "fulladder_halfadder_b__308" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__293 = declare_symbol "fulladder_halfadder_sum__293" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__291 = declare_symbol "fulladder_halfadder_carry__291" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__311 = declare_symbol "fulladder_halfadder_aux__311" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__312 = declare_symbol "fulladder_halfadder_xor_a__312" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__313 = declare_symbol "fulladder_halfadder_xor_b__313" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__310 = declare_symbol "fulladder_halfadder_xor_out__310" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__314 = declare_symbol "fulladder_halfadder_xor_aux__314" [ Type.type_int ] Type.type_bool
let fulladder_a__332 = declare_symbol "fulladder_a__332" [ Type.type_int ] Type.type_bool
let fulladder_b__334 = declare_symbol "fulladder_b__334" [ Type.type_int ] Type.type_bool
let fulladder_c__324 = declare_symbol "fulladder_c__324" [ Type.type_int ] Type.type_bool
let fulladder_c1__315 = declare_symbol "fulladder_c1__315" [ Type.type_int ] Type.type_bool
let fulladder_s1__317 = declare_symbol "fulladder_s1__317" [ Type.type_int ] Type.type_bool
let fulladder_c2__319 = declare_symbol "fulladder_c2__319" [ Type.type_int ] Type.type_bool
let fulladder_sum__99 = declare_symbol "fulladder_sum__99" [ Type.type_int ] Type.type_bool
let fulladder_carry__100 = declare_symbol "fulladder_carry__100" [ Type.type_int ] Type.type_bool
let fulladder_aux__322 = declare_symbol "fulladder_aux__322" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__323 = declare_symbol "fulladder_halfadder_a__323" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__325 = declare_symbol "fulladder_halfadder_b__325" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__321 = declare_symbol "fulladder_halfadder_sum__321" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__320 = declare_symbol "fulladder_halfadder_carry__320" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__327 = declare_symbol "fulladder_halfadder_aux__327" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__328 = declare_symbol "fulladder_halfadder_xor_a__328" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__329 = declare_symbol "fulladder_halfadder_xor_b__329" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__326 = declare_symbol "fulladder_halfadder_xor_out__326" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__330 = declare_symbol "fulladder_halfadder_xor_aux__330" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_a__331 = declare_symbol "fulladder_halfadder_a__331" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_b__333 = declare_symbol "fulladder_halfadder_b__333" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_sum__318 = declare_symbol "fulladder_halfadder_sum__318" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_carry__316 = declare_symbol "fulladder_halfadder_carry__316" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_aux__336 = declare_symbol "fulladder_halfadder_aux__336" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_a__337 = declare_symbol "fulladder_halfadder_xor_a__337" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_b__338 = declare_symbol "fulladder_halfadder_xor_b__338" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_out__335 = declare_symbol "fulladder_halfadder_xor_out__335" [ Type.type_int ] Type.type_bool
let fulladder_halfadder_xor_aux__339 = declare_symbol "fulladder_halfadder_xor_aux__339" [ Type.type_int ] Type.type_bool
let def_c0__30 n =
  (*  c0__30(n)  =  fulladder_carry__100(n)  *)
  let c0__30_term = Term.make_app fulladder_carry__100
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c0__30
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c0__30_term ]
let def_s0__22 n =
  (*  s0__22(n)  =  fulladder_sum__99(n)  *)
  let s0__22_term = Term.make_app fulladder_sum__99
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s0__22
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s0__22_term ]
let def_b0__38 n =
  (*  b0__38(n)  =  aux__90(n)  *)
  let b0__38_term = Term.make_app aux__90
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b0__38
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b0__38_term ]
let def_c1__31 n =
  (*  c1__31(n)  =  fulladder_carry__102(n)  *)
  let c1__31_term = Term.make_app fulladder_carry__102
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c1__31
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c1__31_term ]
let def_s1__23 n =
  (*  s1__23(n)  =  fulladder_sum__101(n)  *)
  let s1__23_term = Term.make_app fulladder_sum__101
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s1__23
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s1__23_term ]
let def_b1__39 n =
  (*  b1__39(n)  =  aux__91(n)  *)
  let b1__39_term = Term.make_app aux__91
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b1__39
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b1__39_term ]
let def_c2__32 n =
  (*  c2__32(n)  =  fulladder_carry__104(n)  *)
  let c2__32_term = Term.make_app fulladder_carry__104
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c2__32
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c2__32_term ]
let def_s2__24 n =
  (*  s2__24(n)  =  fulladder_sum__103(n)  *)
  let s2__24_term = Term.make_app fulladder_sum__103
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s2__24
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s2__24_term ]
let def_b2__40 n =
  (*  b2__40(n)  =  aux__92(n)  *)
  let b2__40_term = Term.make_app aux__92
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b2__40
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b2__40_term ]
let def_c3__33 n =
  (*  c3__33(n)  =  fulladder_carry__106(n)  *)
  let c3__33_term = Term.make_app fulladder_carry__106
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c3__33
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c3__33_term ]
let def_s3__25 n =
  (*  s3__25(n)  =  fulladder_sum__105(n)  *)
  let s3__25_term = Term.make_app fulladder_sum__105
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s3__25
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s3__25_term ]
let def_b3__41 n =
  (*  b3__41(n)  =  aux__93(n)  *)
  let b3__41_term = Term.make_app aux__93
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b3__41
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b3__41_term ]
let def_c4__34 n =
  (*  c4__34(n)  =  fulladder_carry__108(n)  *)
  let c4__34_term = Term.make_app fulladder_carry__108
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c4__34
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c4__34_term ]
let def_s4__26 n =
  (*  s4__26(n)  =  fulladder_sum__107(n)  *)
  let s4__26_term = Term.make_app fulladder_sum__107
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s4__26
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s4__26_term ]
let def_b4__42 n =
  (*  b4__42(n)  =  aux__94(n)  *)
  let b4__42_term = Term.make_app aux__94
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b4__42
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b4__42_term ]
let def_c5__35 n =
  (*  c5__35(n)  =  fulladder_carry__110(n)  *)
  let c5__35_term = Term.make_app fulladder_carry__110
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c5__35
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c5__35_term ]
let def_s5__27 n =
  (*  s5__27(n)  =  fulladder_sum__109(n)  *)
  let s5__27_term = Term.make_app fulladder_sum__109
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s5__27
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s5__27_term ]
let def_b5__43 n =
  (*  b5__43(n)  =  aux__95(n)  *)
  let b5__43_term = Term.make_app aux__95
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b5__43
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b5__43_term ]
let def_c6__36 n =
  (*  c6__36(n)  =  fulladder_carry__112(n)  *)
  let c6__36_term = Term.make_app fulladder_carry__112
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c6__36
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c6__36_term ]
let def_s6__28 n =
  (*  s6__28(n)  =  fulladder_sum__111(n)  *)
  let s6__28_term = Term.make_app fulladder_sum__111
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s6__28
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s6__28_term ]
let def_b6__44 n =
  (*  b6__44(n)  =  aux__96(n)  *)
  let b6__44_term = Term.make_app aux__96
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b6__44
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b6__44_term ]
let def_c7__37 n =
  (*  c7__37(n)  =  fulladder_carry__114(n)  *)
  let c7__37_term = Term.make_app fulladder_carry__114
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app c7__37
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; c7__37_term ]
let def_s7__29 n =
  (*  s7__29(n)  =  fulladder_sum__113(n)  *)
  let s7__29_term = Term.make_app fulladder_sum__113
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app s7__29
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; s7__29_term ]
let def_b7__45 n =
  (*  b7__45(n)  =  aux__97(n)  *)
  let b7__45_term = Term.make_app aux__97
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app b7__45
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; b7__45_term ]
let def_ok__21 n =
  (*  ok__21(n)  =  aux__98(n)  *)
  let ok__21_term = Term.make_app aux__98
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app ok__21
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; ok__21_term ]
let def_aux__98 n =
  (*  (aux__98(n)  ==>  (((((((b0__38(n) && b1__39(n)) && b2__40(n)) && b3__41(n)) && b4__42(n)) && b5__43(n)) && b6__44(n)) && b7__45(n)))  &&  ((((((((b0__38(n) && b1__39(n)) && b2__40(n)) && b3__41(n)) && b4__42(n)) && b5__43(n)) && b6__44(n)) && b7__45(n))  ==>  aux__98(n))  *)
  let aux__98_n = Formula.make_lit Formula.Eq [ Term.make_app aux__98
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__98_formula = Formula.make Formula.And [ Formula.make Formula.And [ Formula.make Formula.And [ Formula.make Formula.And [ Formula.make Formula.And [ Formula.make Formula.And [ Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app b0__38
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app b1__39
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]; Formula.make_lit Formula.Eq [ Term.make_app b2__40
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]; Formula.make_lit Formula.Eq [ Term.make_app b3__41
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]; Formula.make_lit Formula.Eq [ Term.make_app b4__42
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]; Formula.make_lit Formula.Eq [ Term.make_app b5__43
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]; Formula.make_lit Formula.Eq [ Term.make_app b6__44
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]; Formula.make_lit Formula.Eq [ Term.make_app b7__45
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__98_n; aux__98_formula ];
    Formula.make Formula.Imp [ aux__98_formula; aux__98_n ]
   ]


let def_aux__97 n =
  (*  (aux__97(n)  ==>  ((s7__29(n) = true) && (c7__37(n) = true)))  &&  (((s7__29(n) = true) && (c7__37(n) = true))  ==>  aux__97(n))  *)
  let aux__97_n = Formula.make_lit Formula.Eq [ Term.make_app aux__97
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__97_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s7__29
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app c7__37
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__97_n; aux__97_formula ];
    Formula.make Formula.Imp [ aux__97_formula; aux__97_n ]
   ]


let def_aux__96 n =
  (*  (aux__96(n)  ==>  ((s6__28(n) = false) && (c6__36(n) = true)))  &&  (((s6__28(n) = false) && (c6__36(n) = true))  ==>  aux__96(n))  *)
  let aux__96_n = Formula.make_lit Formula.Eq [ Term.make_app aux__96
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__96_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s6__28
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ]; Formula.make_lit Formula.Eq [ Term.make_app c6__36
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__96_n; aux__96_formula ];
    Formula.make Formula.Imp [ aux__96_formula; aux__96_n ]
   ]


let def_aux__95 n =
  (*  (aux__95(n)  ==>  ((s5__27(n) = false) && (c5__35(n) = true)))  &&  (((s5__27(n) = false) && (c5__35(n) = true))  ==>  aux__95(n))  *)
  let aux__95_n = Formula.make_lit Formula.Eq [ Term.make_app aux__95
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__95_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s5__27
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ]; Formula.make_lit Formula.Eq [ Term.make_app c5__35
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__95_n; aux__95_formula ];
    Formula.make Formula.Imp [ aux__95_formula; aux__95_n ]
   ]


let def_aux__94 n =
  (*  (aux__94(n)  ==>  ((s4__26(n) = false) && (c4__34(n) = true)))  &&  (((s4__26(n) = false) && (c4__34(n) = true))  ==>  aux__94(n))  *)
  let aux__94_n = Formula.make_lit Formula.Eq [ Term.make_app aux__94
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__94_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s4__26
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ]; Formula.make_lit Formula.Eq [ Term.make_app c4__34
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__94_n; aux__94_formula ];
    Formula.make Formula.Imp [ aux__94_formula; aux__94_n ]
   ]


let def_aux__93 n =
  (*  (aux__93(n)  ==>  ((s3__25(n) = true) && (c3__33(n) = false)))  &&  (((s3__25(n) = true) && (c3__33(n) = false))  ==>  aux__93(n))  *)
  let aux__93_n = Formula.make_lit Formula.Eq [ Term.make_app aux__93
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__93_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s3__25
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app c3__33
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__93_n; aux__93_formula ];
    Formula.make Formula.Imp [ aux__93_formula; aux__93_n ]
   ]


let def_aux__92 n =
  (*  (aux__92(n)  ==>  ((s2__24(n) = true) && (c2__32(n) = false)))  &&  (((s2__24(n) = true) && (c2__32(n) = false))  ==>  aux__92(n))  *)
  let aux__92_n = Formula.make_lit Formula.Eq [ Term.make_app aux__92
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__92_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s2__24
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app c2__32
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__92_n; aux__92_formula ];
    Formula.make Formula.Imp [ aux__92_formula; aux__92_n ]
   ]


let def_aux__91 n =
  (*  (aux__91(n)  ==>  ((s1__23(n) = true) && (c1__31(n) = false)))  &&  (((s1__23(n) = true) && (c1__31(n) = false))  ==>  aux__91(n))  *)
  let aux__91_n = Formula.make_lit Formula.Eq [ Term.make_app aux__91
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__91_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s1__23
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app c1__31
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__91_n; aux__91_formula ];
    Formula.make Formula.Imp [ aux__91_formula; aux__91_n ]
   ]


let def_aux__90 n =
  (*  (aux__90(n)  ==>  ((s0__22(n) = false) && (c0__30(n) = false)))  &&  (((s0__22(n) = false) && (c0__30(n) = false))  ==>  aux__90(n))  *)
  let aux__90_n = Formula.make_lit Formula.Eq [ Term.make_app aux__90
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let aux__90_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app s0__22
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ]; Formula.make_lit Formula.Eq [ Term.make_app c0__30
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_false ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ aux__90_n; aux__90_formula ];
    Formula.make Formula.Imp [ aux__90_formula; aux__90_n ]
   ]


let def_fulladder_a__157 n =
  (*  fulladder_a__157(n)  =  true  *)
  let fulladder_a__157_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__157
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__157_term ]
let def_fulladder_b__159 n =
  (*  fulladder_b__159(n)  =  true  *)
  let fulladder_b__159_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__159
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__159_term ]
let def_fulladder_c__149 n =
  (*  fulladder_c__149(n)  =  true  *)
  let fulladder_c__149_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__149
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__149_term ]
let def_fulladder_c1__140 n =
  (*  fulladder_c1__140(n)  =  fulladder_halfadder_carry__141(n)  *)
  let fulladder_c1__140_term = Term.make_app fulladder_halfadder_carry__141
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__140
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__140_term ]
let def_fulladder_s1__142 n =
  (*  fulladder_s1__142(n)  =  fulladder_halfadder_sum__143(n)  *)
  let fulladder_s1__142_term = Term.make_app fulladder_halfadder_sum__143
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__142
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__142_term ]
let def_fulladder_c2__144 n =
  (*  fulladder_c2__144(n)  =  fulladder_halfadder_carry__145(n)  *)
  let fulladder_c2__144_term = Term.make_app fulladder_halfadder_carry__145
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__144
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__144_term ]
let def_fulladder_sum__113 n =
  (*  fulladder_sum__113(n)  =  fulladder_halfadder_sum__146(n)  *)
  let fulladder_sum__113_term = Term.make_app fulladder_halfadder_sum__146
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__113
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__113_term ]
let def_fulladder_carry__114 n =
  (*  fulladder_carry__114(n)  =  fulladder_aux__147(n)  *)
  let fulladder_carry__114_term = Term.make_app fulladder_aux__147
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__114
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__114_term ]
let def_fulladder_aux__147 n =
  (*  (fulladder_aux__147(n)  ==>  (fulladder_c1__140(n) || fulladder_c2__144(n)))  &&  ((fulladder_c1__140(n) || fulladder_c2__144(n))  ==>  fulladder_aux__147(n))  *)
  let fulladder_aux__147_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__147
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__147_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__140
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__144
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__147_n; fulladder_aux__147_formula ];
    Formula.make Formula.Imp [ fulladder_aux__147_formula; fulladder_aux__147_n ]
   ]


let def_fulladder_halfadder_a__148 n =
  (*  fulladder_halfadder_a__148(n)  =  fulladder_c__149(n)  *)
  let fulladder_halfadder_a__148_term = Term.make_app fulladder_c__149
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__148
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__148_term ]
let def_fulladder_halfadder_b__150 n =
  (*  fulladder_halfadder_b__150(n)  =  fulladder_s1__142(n)  *)
  let fulladder_halfadder_b__150_term = Term.make_app fulladder_s1__142
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__150
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__150_term ]
let def_fulladder_halfadder_sum__146 n =
  (*  fulladder_halfadder_sum__146(n)  =  fulladder_halfadder_xor_out__151(n)  *)
  let fulladder_halfadder_sum__146_term = Term.make_app fulladder_halfadder_xor_out__151
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__146
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__146_term ]
let def_fulladder_halfadder_carry__145 n =
  (*  fulladder_halfadder_carry__145(n)  =  fulladder_halfadder_aux__152(n)  *)
  let fulladder_halfadder_carry__145_term = Term.make_app fulladder_halfadder_aux__152
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__145
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__145_term ]
let def_fulladder_halfadder_aux__152 n =
  (*  (fulladder_halfadder_aux__152(n)  ==>  (fulladder_halfadder_a__148(n) && fulladder_halfadder_b__150(n)))  &&  ((fulladder_halfadder_a__148(n) && fulladder_halfadder_b__150(n))  ==>  fulladder_halfadder_aux__152(n))  *)
  let fulladder_halfadder_aux__152_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__152
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__152_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__148
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__150
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__152_n; fulladder_halfadder_aux__152_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__152_formula; fulladder_halfadder_aux__152_n ]
   ]


let def_fulladder_halfadder_xor_a__153 n =
  (*  fulladder_halfadder_xor_a__153(n)  =  fulladder_halfadder_a__148(n)  *)
  let fulladder_halfadder_xor_a__153_term = Term.make_app fulladder_halfadder_a__148
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__153
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__153_term ]
let def_fulladder_halfadder_xor_b__154 n =
  (*  fulladder_halfadder_xor_b__154(n)  =  fulladder_halfadder_b__150(n)  *)
  let fulladder_halfadder_xor_b__154_term = Term.make_app fulladder_halfadder_b__150
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__154
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__154_term ]
let def_fulladder_halfadder_xor_out__151 n =
  (*  fulladder_halfadder_xor_out__151(n)  =  (if (fulladder_halfadder_xor_a__153(n) && fulladder_halfadder_xor_b__154(n)) then false else fulladder_halfadder_xor_aux__155(n))  *)
  let fulladder_halfadder_xor_out__151_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__153
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__154
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__155
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__151
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__151_term ]
let def_fulladder_halfadder_xor_aux__155 n =
  (*  (fulladder_halfadder_xor_aux__155(n)  ==>  (fulladder_halfadder_xor_a__153(n) || fulladder_halfadder_xor_b__154(n)))  &&  ((fulladder_halfadder_xor_a__153(n) || fulladder_halfadder_xor_b__154(n))  ==>  fulladder_halfadder_xor_aux__155(n))  *)
  let fulladder_halfadder_xor_aux__155_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__155
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__155_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__153
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__154
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__155_n; fulladder_halfadder_xor_aux__155_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__155_formula; fulladder_halfadder_xor_aux__155_n ]
   ]


let def_fulladder_halfadder_a__156 n =
  (*  fulladder_halfadder_a__156(n)  =  fulladder_a__157(n)  *)
  let fulladder_halfadder_a__156_term = Term.make_app fulladder_a__157
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__156
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__156_term ]
let def_fulladder_halfadder_b__158 n =
  (*  fulladder_halfadder_b__158(n)  =  fulladder_b__159(n)  *)
  let fulladder_halfadder_b__158_term = Term.make_app fulladder_b__159
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__158
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__158_term ]
let def_fulladder_halfadder_sum__143 n =
  (*  fulladder_halfadder_sum__143(n)  =  fulladder_halfadder_xor_out__160(n)  *)
  let fulladder_halfadder_sum__143_term = Term.make_app fulladder_halfadder_xor_out__160
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__143
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__143_term ]
let def_fulladder_halfadder_carry__141 n =
  (*  fulladder_halfadder_carry__141(n)  =  fulladder_halfadder_aux__161(n)  *)
  let fulladder_halfadder_carry__141_term = Term.make_app fulladder_halfadder_aux__161
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__141
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__141_term ]
let def_fulladder_halfadder_aux__161 n =
  (*  (fulladder_halfadder_aux__161(n)  ==>  (fulladder_halfadder_a__156(n) && fulladder_halfadder_b__158(n)))  &&  ((fulladder_halfadder_a__156(n) && fulladder_halfadder_b__158(n))  ==>  fulladder_halfadder_aux__161(n))  *)
  let fulladder_halfadder_aux__161_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__161
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__161_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__156
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__158
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__161_n; fulladder_halfadder_aux__161_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__161_formula; fulladder_halfadder_aux__161_n ]
   ]


let def_fulladder_halfadder_xor_a__162 n =
  (*  fulladder_halfadder_xor_a__162(n)  =  fulladder_halfadder_a__156(n)  *)
  let fulladder_halfadder_xor_a__162_term = Term.make_app fulladder_halfadder_a__156
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__162
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__162_term ]
let def_fulladder_halfadder_xor_b__163 n =
  (*  fulladder_halfadder_xor_b__163(n)  =  fulladder_halfadder_b__158(n)  *)
  let fulladder_halfadder_xor_b__163_term = Term.make_app fulladder_halfadder_b__158
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__163
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__163_term ]
let def_fulladder_halfadder_xor_out__160 n =
  (*  fulladder_halfadder_xor_out__160(n)  =  (if (fulladder_halfadder_xor_a__162(n) && fulladder_halfadder_xor_b__163(n)) then false else fulladder_halfadder_xor_aux__164(n))  *)
  let fulladder_halfadder_xor_out__160_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__162
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__163
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__164
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__160
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__160_term ]
let def_fulladder_halfadder_xor_aux__164 n =
  (*  (fulladder_halfadder_xor_aux__164(n)  ==>  (fulladder_halfadder_xor_a__162(n) || fulladder_halfadder_xor_b__163(n)))  &&  ((fulladder_halfadder_xor_a__162(n) || fulladder_halfadder_xor_b__163(n))  ==>  fulladder_halfadder_xor_aux__164(n))  *)
  let fulladder_halfadder_xor_aux__164_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__164
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__164_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__162
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__163
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__164_n; fulladder_halfadder_xor_aux__164_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__164_formula; fulladder_halfadder_xor_aux__164_n ]
   ]


let def_fulladder_a__182 n =
  (*  fulladder_a__182(n)  =  true  *)
  let fulladder_a__182_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__182
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__182_term ]
let def_fulladder_b__184 n =
  (*  fulladder_b__184(n)  =  true  *)
  let fulladder_b__184_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__184
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__184_term ]
let def_fulladder_c__174 n =
  (*  fulladder_c__174(n)  =  false  *)
  let fulladder_c__174_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__174
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__174_term ]
let def_fulladder_c1__165 n =
  (*  fulladder_c1__165(n)  =  fulladder_halfadder_carry__166(n)  *)
  let fulladder_c1__165_term = Term.make_app fulladder_halfadder_carry__166
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__165
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__165_term ]
let def_fulladder_s1__167 n =
  (*  fulladder_s1__167(n)  =  fulladder_halfadder_sum__168(n)  *)
  let fulladder_s1__167_term = Term.make_app fulladder_halfadder_sum__168
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__167
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__167_term ]
let def_fulladder_c2__169 n =
  (*  fulladder_c2__169(n)  =  fulladder_halfadder_carry__170(n)  *)
  let fulladder_c2__169_term = Term.make_app fulladder_halfadder_carry__170
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__169
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__169_term ]
let def_fulladder_sum__111 n =
  (*  fulladder_sum__111(n)  =  fulladder_halfadder_sum__171(n)  *)
  let fulladder_sum__111_term = Term.make_app fulladder_halfadder_sum__171
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__111
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__111_term ]
let def_fulladder_carry__112 n =
  (*  fulladder_carry__112(n)  =  fulladder_aux__172(n)  *)
  let fulladder_carry__112_term = Term.make_app fulladder_aux__172
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__112
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__112_term ]
let def_fulladder_aux__172 n =
  (*  (fulladder_aux__172(n)  ==>  (fulladder_c1__165(n) || fulladder_c2__169(n)))  &&  ((fulladder_c1__165(n) || fulladder_c2__169(n))  ==>  fulladder_aux__172(n))  *)
  let fulladder_aux__172_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__172
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__172_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__165
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__169
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__172_n; fulladder_aux__172_formula ];
    Formula.make Formula.Imp [ fulladder_aux__172_formula; fulladder_aux__172_n ]
   ]


let def_fulladder_halfadder_a__173 n =
  (*  fulladder_halfadder_a__173(n)  =  fulladder_c__174(n)  *)
  let fulladder_halfadder_a__173_term = Term.make_app fulladder_c__174
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__173
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__173_term ]
let def_fulladder_halfadder_b__175 n =
  (*  fulladder_halfadder_b__175(n)  =  fulladder_s1__167(n)  *)
  let fulladder_halfadder_b__175_term = Term.make_app fulladder_s1__167
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__175
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__175_term ]
let def_fulladder_halfadder_sum__171 n =
  (*  fulladder_halfadder_sum__171(n)  =  fulladder_halfadder_xor_out__176(n)  *)
  let fulladder_halfadder_sum__171_term = Term.make_app fulladder_halfadder_xor_out__176
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__171
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__171_term ]
let def_fulladder_halfadder_carry__170 n =
  (*  fulladder_halfadder_carry__170(n)  =  fulladder_halfadder_aux__177(n)  *)
  let fulladder_halfadder_carry__170_term = Term.make_app fulladder_halfadder_aux__177
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__170
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__170_term ]
let def_fulladder_halfadder_aux__177 n =
  (*  (fulladder_halfadder_aux__177(n)  ==>  (fulladder_halfadder_a__173(n) && fulladder_halfadder_b__175(n)))  &&  ((fulladder_halfadder_a__173(n) && fulladder_halfadder_b__175(n))  ==>  fulladder_halfadder_aux__177(n))  *)
  let fulladder_halfadder_aux__177_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__177
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__177_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__173
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__175
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__177_n; fulladder_halfadder_aux__177_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__177_formula; fulladder_halfadder_aux__177_n ]
   ]


let def_fulladder_halfadder_xor_a__178 n =
  (*  fulladder_halfadder_xor_a__178(n)  =  fulladder_halfadder_a__173(n)  *)
  let fulladder_halfadder_xor_a__178_term = Term.make_app fulladder_halfadder_a__173
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__178
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__178_term ]
let def_fulladder_halfadder_xor_b__179 n =
  (*  fulladder_halfadder_xor_b__179(n)  =  fulladder_halfadder_b__175(n)  *)
  let fulladder_halfadder_xor_b__179_term = Term.make_app fulladder_halfadder_b__175
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__179
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__179_term ]
let def_fulladder_halfadder_xor_out__176 n =
  (*  fulladder_halfadder_xor_out__176(n)  =  (if (fulladder_halfadder_xor_a__178(n) && fulladder_halfadder_xor_b__179(n)) then false else fulladder_halfadder_xor_aux__180(n))  *)
  let fulladder_halfadder_xor_out__176_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__178
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__179
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__180
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__176
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__176_term ]
let def_fulladder_halfadder_xor_aux__180 n =
  (*  (fulladder_halfadder_xor_aux__180(n)  ==>  (fulladder_halfadder_xor_a__178(n) || fulladder_halfadder_xor_b__179(n)))  &&  ((fulladder_halfadder_xor_a__178(n) || fulladder_halfadder_xor_b__179(n))  ==>  fulladder_halfadder_xor_aux__180(n))  *)
  let fulladder_halfadder_xor_aux__180_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__180
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__180_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__178
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__179
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__180_n; fulladder_halfadder_xor_aux__180_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__180_formula; fulladder_halfadder_xor_aux__180_n ]
   ]


let def_fulladder_halfadder_a__181 n =
  (*  fulladder_halfadder_a__181(n)  =  fulladder_a__182(n)  *)
  let fulladder_halfadder_a__181_term = Term.make_app fulladder_a__182
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__181
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__181_term ]
let def_fulladder_halfadder_b__183 n =
  (*  fulladder_halfadder_b__183(n)  =  fulladder_b__184(n)  *)
  let fulladder_halfadder_b__183_term = Term.make_app fulladder_b__184
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__183
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__183_term ]
let def_fulladder_halfadder_sum__168 n =
  (*  fulladder_halfadder_sum__168(n)  =  fulladder_halfadder_xor_out__185(n)  *)
  let fulladder_halfadder_sum__168_term = Term.make_app fulladder_halfadder_xor_out__185
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__168
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__168_term ]
let def_fulladder_halfadder_carry__166 n =
  (*  fulladder_halfadder_carry__166(n)  =  fulladder_halfadder_aux__186(n)  *)
  let fulladder_halfadder_carry__166_term = Term.make_app fulladder_halfadder_aux__186
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__166
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__166_term ]
let def_fulladder_halfadder_aux__186 n =
  (*  (fulladder_halfadder_aux__186(n)  ==>  (fulladder_halfadder_a__181(n) && fulladder_halfadder_b__183(n)))  &&  ((fulladder_halfadder_a__181(n) && fulladder_halfadder_b__183(n))  ==>  fulladder_halfadder_aux__186(n))  *)
  let fulladder_halfadder_aux__186_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__186
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__186_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__181
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__183
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__186_n; fulladder_halfadder_aux__186_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__186_formula; fulladder_halfadder_aux__186_n ]
   ]


let def_fulladder_halfadder_xor_a__187 n =
  (*  fulladder_halfadder_xor_a__187(n)  =  fulladder_halfadder_a__181(n)  *)
  let fulladder_halfadder_xor_a__187_term = Term.make_app fulladder_halfadder_a__181
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__187
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__187_term ]
let def_fulladder_halfadder_xor_b__188 n =
  (*  fulladder_halfadder_xor_b__188(n)  =  fulladder_halfadder_b__183(n)  *)
  let fulladder_halfadder_xor_b__188_term = Term.make_app fulladder_halfadder_b__183
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__188
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__188_term ]
let def_fulladder_halfadder_xor_out__185 n =
  (*  fulladder_halfadder_xor_out__185(n)  =  (if (fulladder_halfadder_xor_a__187(n) && fulladder_halfadder_xor_b__188(n)) then false else fulladder_halfadder_xor_aux__189(n))  *)
  let fulladder_halfadder_xor_out__185_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__187
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__188
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__189
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__185
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__185_term ]
let def_fulladder_halfadder_xor_aux__189 n =
  (*  (fulladder_halfadder_xor_aux__189(n)  ==>  (fulladder_halfadder_xor_a__187(n) || fulladder_halfadder_xor_b__188(n)))  &&  ((fulladder_halfadder_xor_a__187(n) || fulladder_halfadder_xor_b__188(n))  ==>  fulladder_halfadder_xor_aux__189(n))  *)
  let fulladder_halfadder_xor_aux__189_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__189
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__189_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__187
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__188
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__189_n; fulladder_halfadder_xor_aux__189_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__189_formula; fulladder_halfadder_xor_aux__189_n ]
   ]


let def_fulladder_a__207 n =
  (*  fulladder_a__207(n)  =  true  *)
  let fulladder_a__207_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__207
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__207_term ]
let def_fulladder_b__209 n =
  (*  fulladder_b__209(n)  =  false  *)
  let fulladder_b__209_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__209
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__209_term ]
let def_fulladder_c__199 n =
  (*  fulladder_c__199(n)  =  true  *)
  let fulladder_c__199_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__199
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__199_term ]
let def_fulladder_c1__190 n =
  (*  fulladder_c1__190(n)  =  fulladder_halfadder_carry__191(n)  *)
  let fulladder_c1__190_term = Term.make_app fulladder_halfadder_carry__191
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__190
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__190_term ]
let def_fulladder_s1__192 n =
  (*  fulladder_s1__192(n)  =  fulladder_halfadder_sum__193(n)  *)
  let fulladder_s1__192_term = Term.make_app fulladder_halfadder_sum__193
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__192
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__192_term ]
let def_fulladder_c2__194 n =
  (*  fulladder_c2__194(n)  =  fulladder_halfadder_carry__195(n)  *)
  let fulladder_c2__194_term = Term.make_app fulladder_halfadder_carry__195
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__194
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__194_term ]
let def_fulladder_sum__109 n =
  (*  fulladder_sum__109(n)  =  fulladder_halfadder_sum__196(n)  *)
  let fulladder_sum__109_term = Term.make_app fulladder_halfadder_sum__196
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__109
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__109_term ]
let def_fulladder_carry__110 n =
  (*  fulladder_carry__110(n)  =  fulladder_aux__197(n)  *)
  let fulladder_carry__110_term = Term.make_app fulladder_aux__197
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__110
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__110_term ]
let def_fulladder_aux__197 n =
  (*  (fulladder_aux__197(n)  ==>  (fulladder_c1__190(n) || fulladder_c2__194(n)))  &&  ((fulladder_c1__190(n) || fulladder_c2__194(n))  ==>  fulladder_aux__197(n))  *)
  let fulladder_aux__197_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__197
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__197_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__190
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__194
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__197_n; fulladder_aux__197_formula ];
    Formula.make Formula.Imp [ fulladder_aux__197_formula; fulladder_aux__197_n ]
   ]


let def_fulladder_halfadder_a__198 n =
  (*  fulladder_halfadder_a__198(n)  =  fulladder_c__199(n)  *)
  let fulladder_halfadder_a__198_term = Term.make_app fulladder_c__199
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__198
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__198_term ]
let def_fulladder_halfadder_b__200 n =
  (*  fulladder_halfadder_b__200(n)  =  fulladder_s1__192(n)  *)
  let fulladder_halfadder_b__200_term = Term.make_app fulladder_s1__192
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__200
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__200_term ]
let def_fulladder_halfadder_sum__196 n =
  (*  fulladder_halfadder_sum__196(n)  =  fulladder_halfadder_xor_out__201(n)  *)
  let fulladder_halfadder_sum__196_term = Term.make_app fulladder_halfadder_xor_out__201
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__196
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__196_term ]
let def_fulladder_halfadder_carry__195 n =
  (*  fulladder_halfadder_carry__195(n)  =  fulladder_halfadder_aux__202(n)  *)
  let fulladder_halfadder_carry__195_term = Term.make_app fulladder_halfadder_aux__202
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__195
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__195_term ]
let def_fulladder_halfadder_aux__202 n =
  (*  (fulladder_halfadder_aux__202(n)  ==>  (fulladder_halfadder_a__198(n) && fulladder_halfadder_b__200(n)))  &&  ((fulladder_halfadder_a__198(n) && fulladder_halfadder_b__200(n))  ==>  fulladder_halfadder_aux__202(n))  *)
  let fulladder_halfadder_aux__202_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__202
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__202_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__198
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__200
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__202_n; fulladder_halfadder_aux__202_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__202_formula; fulladder_halfadder_aux__202_n ]
   ]


let def_fulladder_halfadder_xor_a__203 n =
  (*  fulladder_halfadder_xor_a__203(n)  =  fulladder_halfadder_a__198(n)  *)
  let fulladder_halfadder_xor_a__203_term = Term.make_app fulladder_halfadder_a__198
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__203
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__203_term ]
let def_fulladder_halfadder_xor_b__204 n =
  (*  fulladder_halfadder_xor_b__204(n)  =  fulladder_halfadder_b__200(n)  *)
  let fulladder_halfadder_xor_b__204_term = Term.make_app fulladder_halfadder_b__200
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__204
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__204_term ]
let def_fulladder_halfadder_xor_out__201 n =
  (*  fulladder_halfadder_xor_out__201(n)  =  (if (fulladder_halfadder_xor_a__203(n) && fulladder_halfadder_xor_b__204(n)) then false else fulladder_halfadder_xor_aux__205(n))  *)
  let fulladder_halfadder_xor_out__201_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__203
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__204
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__205
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__201
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__201_term ]
let def_fulladder_halfadder_xor_aux__205 n =
  (*  (fulladder_halfadder_xor_aux__205(n)  ==>  (fulladder_halfadder_xor_a__203(n) || fulladder_halfadder_xor_b__204(n)))  &&  ((fulladder_halfadder_xor_a__203(n) || fulladder_halfadder_xor_b__204(n))  ==>  fulladder_halfadder_xor_aux__205(n))  *)
  let fulladder_halfadder_xor_aux__205_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__205
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__205_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__203
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__204
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__205_n; fulladder_halfadder_xor_aux__205_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__205_formula; fulladder_halfadder_xor_aux__205_n ]
   ]


let def_fulladder_halfadder_a__206 n =
  (*  fulladder_halfadder_a__206(n)  =  fulladder_a__207(n)  *)
  let fulladder_halfadder_a__206_term = Term.make_app fulladder_a__207
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__206
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__206_term ]
let def_fulladder_halfadder_b__208 n =
  (*  fulladder_halfadder_b__208(n)  =  fulladder_b__209(n)  *)
  let fulladder_halfadder_b__208_term = Term.make_app fulladder_b__209
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__208
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__208_term ]
let def_fulladder_halfadder_sum__193 n =
  (*  fulladder_halfadder_sum__193(n)  =  fulladder_halfadder_xor_out__210(n)  *)
  let fulladder_halfadder_sum__193_term = Term.make_app fulladder_halfadder_xor_out__210
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__193
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__193_term ]
let def_fulladder_halfadder_carry__191 n =
  (*  fulladder_halfadder_carry__191(n)  =  fulladder_halfadder_aux__211(n)  *)
  let fulladder_halfadder_carry__191_term = Term.make_app fulladder_halfadder_aux__211
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__191
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__191_term ]
let def_fulladder_halfadder_aux__211 n =
  (*  (fulladder_halfadder_aux__211(n)  ==>  (fulladder_halfadder_a__206(n) && fulladder_halfadder_b__208(n)))  &&  ((fulladder_halfadder_a__206(n) && fulladder_halfadder_b__208(n))  ==>  fulladder_halfadder_aux__211(n))  *)
  let fulladder_halfadder_aux__211_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__211
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__211_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__206
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__208
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__211_n; fulladder_halfadder_aux__211_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__211_formula; fulladder_halfadder_aux__211_n ]
   ]


let def_fulladder_halfadder_xor_a__212 n =
  (*  fulladder_halfadder_xor_a__212(n)  =  fulladder_halfadder_a__206(n)  *)
  let fulladder_halfadder_xor_a__212_term = Term.make_app fulladder_halfadder_a__206
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__212
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__212_term ]
let def_fulladder_halfadder_xor_b__213 n =
  (*  fulladder_halfadder_xor_b__213(n)  =  fulladder_halfadder_b__208(n)  *)
  let fulladder_halfadder_xor_b__213_term = Term.make_app fulladder_halfadder_b__208
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__213
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__213_term ]
let def_fulladder_halfadder_xor_out__210 n =
  (*  fulladder_halfadder_xor_out__210(n)  =  (if (fulladder_halfadder_xor_a__212(n) && fulladder_halfadder_xor_b__213(n)) then false else fulladder_halfadder_xor_aux__214(n))  *)
  let fulladder_halfadder_xor_out__210_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__212
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__213
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__214
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__210
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__210_term ]
let def_fulladder_halfadder_xor_aux__214 n =
  (*  (fulladder_halfadder_xor_aux__214(n)  ==>  (fulladder_halfadder_xor_a__212(n) || fulladder_halfadder_xor_b__213(n)))  &&  ((fulladder_halfadder_xor_a__212(n) || fulladder_halfadder_xor_b__213(n))  ==>  fulladder_halfadder_xor_aux__214(n))  *)
  let fulladder_halfadder_xor_aux__214_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__214
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__214_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__212
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__213
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__214_n; fulladder_halfadder_xor_aux__214_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__214_formula; fulladder_halfadder_xor_aux__214_n ]
   ]


let def_fulladder_a__232 n =
  (*  fulladder_a__232(n)  =  false  *)
  let fulladder_a__232_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__232
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__232_term ]
let def_fulladder_b__234 n =
  (*  fulladder_b__234(n)  =  true  *)
  let fulladder_b__234_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__234
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__234_term ]
let def_fulladder_c__224 n =
  (*  fulladder_c__224(n)  =  true  *)
  let fulladder_c__224_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__224
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__224_term ]
let def_fulladder_c1__215 n =
  (*  fulladder_c1__215(n)  =  fulladder_halfadder_carry__216(n)  *)
  let fulladder_c1__215_term = Term.make_app fulladder_halfadder_carry__216
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__215
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__215_term ]
let def_fulladder_s1__217 n =
  (*  fulladder_s1__217(n)  =  fulladder_halfadder_sum__218(n)  *)
  let fulladder_s1__217_term = Term.make_app fulladder_halfadder_sum__218
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__217
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__217_term ]
let def_fulladder_c2__219 n =
  (*  fulladder_c2__219(n)  =  fulladder_halfadder_carry__220(n)  *)
  let fulladder_c2__219_term = Term.make_app fulladder_halfadder_carry__220
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__219
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__219_term ]
let def_fulladder_sum__107 n =
  (*  fulladder_sum__107(n)  =  fulladder_halfadder_sum__221(n)  *)
  let fulladder_sum__107_term = Term.make_app fulladder_halfadder_sum__221
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__107
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__107_term ]
let def_fulladder_carry__108 n =
  (*  fulladder_carry__108(n)  =  fulladder_aux__222(n)  *)
  let fulladder_carry__108_term = Term.make_app fulladder_aux__222
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__108
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__108_term ]
let def_fulladder_aux__222 n =
  (*  (fulladder_aux__222(n)  ==>  (fulladder_c1__215(n) || fulladder_c2__219(n)))  &&  ((fulladder_c1__215(n) || fulladder_c2__219(n))  ==>  fulladder_aux__222(n))  *)
  let fulladder_aux__222_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__222
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__222_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__215
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__219
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__222_n; fulladder_aux__222_formula ];
    Formula.make Formula.Imp [ fulladder_aux__222_formula; fulladder_aux__222_n ]
   ]


let def_fulladder_halfadder_a__223 n =
  (*  fulladder_halfadder_a__223(n)  =  fulladder_c__224(n)  *)
  let fulladder_halfadder_a__223_term = Term.make_app fulladder_c__224
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__223
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__223_term ]
let def_fulladder_halfadder_b__225 n =
  (*  fulladder_halfadder_b__225(n)  =  fulladder_s1__217(n)  *)
  let fulladder_halfadder_b__225_term = Term.make_app fulladder_s1__217
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__225
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__225_term ]
let def_fulladder_halfadder_sum__221 n =
  (*  fulladder_halfadder_sum__221(n)  =  fulladder_halfadder_xor_out__226(n)  *)
  let fulladder_halfadder_sum__221_term = Term.make_app fulladder_halfadder_xor_out__226
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__221
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__221_term ]
let def_fulladder_halfadder_carry__220 n =
  (*  fulladder_halfadder_carry__220(n)  =  fulladder_halfadder_aux__227(n)  *)
  let fulladder_halfadder_carry__220_term = Term.make_app fulladder_halfadder_aux__227
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__220
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__220_term ]
let def_fulladder_halfadder_aux__227 n =
  (*  (fulladder_halfadder_aux__227(n)  ==>  (fulladder_halfadder_a__223(n) && fulladder_halfadder_b__225(n)))  &&  ((fulladder_halfadder_a__223(n) && fulladder_halfadder_b__225(n))  ==>  fulladder_halfadder_aux__227(n))  *)
  let fulladder_halfadder_aux__227_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__227
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__227_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__223
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__225
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__227_n; fulladder_halfadder_aux__227_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__227_formula; fulladder_halfadder_aux__227_n ]
   ]


let def_fulladder_halfadder_xor_a__228 n =
  (*  fulladder_halfadder_xor_a__228(n)  =  fulladder_halfadder_a__223(n)  *)
  let fulladder_halfadder_xor_a__228_term = Term.make_app fulladder_halfadder_a__223
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__228
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__228_term ]
let def_fulladder_halfadder_xor_b__229 n =
  (*  fulladder_halfadder_xor_b__229(n)  =  fulladder_halfadder_b__225(n)  *)
  let fulladder_halfadder_xor_b__229_term = Term.make_app fulladder_halfadder_b__225
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__229
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__229_term ]
let def_fulladder_halfadder_xor_out__226 n =
  (*  fulladder_halfadder_xor_out__226(n)  =  (if (fulladder_halfadder_xor_a__228(n) && fulladder_halfadder_xor_b__229(n)) then false else fulladder_halfadder_xor_aux__230(n))  *)
  let fulladder_halfadder_xor_out__226_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__228
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__229
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__230
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__226
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__226_term ]
let def_fulladder_halfadder_xor_aux__230 n =
  (*  (fulladder_halfadder_xor_aux__230(n)  ==>  (fulladder_halfadder_xor_a__228(n) || fulladder_halfadder_xor_b__229(n)))  &&  ((fulladder_halfadder_xor_a__228(n) || fulladder_halfadder_xor_b__229(n))  ==>  fulladder_halfadder_xor_aux__230(n))  *)
  let fulladder_halfadder_xor_aux__230_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__230
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__230_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__228
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__229
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__230_n; fulladder_halfadder_xor_aux__230_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__230_formula; fulladder_halfadder_xor_aux__230_n ]
   ]


let def_fulladder_halfadder_a__231 n =
  (*  fulladder_halfadder_a__231(n)  =  fulladder_a__232(n)  *)
  let fulladder_halfadder_a__231_term = Term.make_app fulladder_a__232
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__231
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__231_term ]
let def_fulladder_halfadder_b__233 n =
  (*  fulladder_halfadder_b__233(n)  =  fulladder_b__234(n)  *)
  let fulladder_halfadder_b__233_term = Term.make_app fulladder_b__234
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__233
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__233_term ]
let def_fulladder_halfadder_sum__218 n =
  (*  fulladder_halfadder_sum__218(n)  =  fulladder_halfadder_xor_out__235(n)  *)
  let fulladder_halfadder_sum__218_term = Term.make_app fulladder_halfadder_xor_out__235
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__218
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__218_term ]
let def_fulladder_halfadder_carry__216 n =
  (*  fulladder_halfadder_carry__216(n)  =  fulladder_halfadder_aux__236(n)  *)
  let fulladder_halfadder_carry__216_term = Term.make_app fulladder_halfadder_aux__236
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__216
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__216_term ]
let def_fulladder_halfadder_aux__236 n =
  (*  (fulladder_halfadder_aux__236(n)  ==>  (fulladder_halfadder_a__231(n) && fulladder_halfadder_b__233(n)))  &&  ((fulladder_halfadder_a__231(n) && fulladder_halfadder_b__233(n))  ==>  fulladder_halfadder_aux__236(n))  *)
  let fulladder_halfadder_aux__236_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__236
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__236_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__231
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__233
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__236_n; fulladder_halfadder_aux__236_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__236_formula; fulladder_halfadder_aux__236_n ]
   ]


let def_fulladder_halfadder_xor_a__237 n =
  (*  fulladder_halfadder_xor_a__237(n)  =  fulladder_halfadder_a__231(n)  *)
  let fulladder_halfadder_xor_a__237_term = Term.make_app fulladder_halfadder_a__231
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__237
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__237_term ]
let def_fulladder_halfadder_xor_b__238 n =
  (*  fulladder_halfadder_xor_b__238(n)  =  fulladder_halfadder_b__233(n)  *)
  let fulladder_halfadder_xor_b__238_term = Term.make_app fulladder_halfadder_b__233
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__238
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__238_term ]
let def_fulladder_halfadder_xor_out__235 n =
  (*  fulladder_halfadder_xor_out__235(n)  =  (if (fulladder_halfadder_xor_a__237(n) && fulladder_halfadder_xor_b__238(n)) then false else fulladder_halfadder_xor_aux__239(n))  *)
  let fulladder_halfadder_xor_out__235_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__237
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__238
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__239
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__235
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__235_term ]
let def_fulladder_halfadder_xor_aux__239 n =
  (*  (fulladder_halfadder_xor_aux__239(n)  ==>  (fulladder_halfadder_xor_a__237(n) || fulladder_halfadder_xor_b__238(n)))  &&  ((fulladder_halfadder_xor_a__237(n) || fulladder_halfadder_xor_b__238(n))  ==>  fulladder_halfadder_xor_aux__239(n))  *)
  let fulladder_halfadder_xor_aux__239_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__239
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__239_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__237
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__238
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__239_n; fulladder_halfadder_xor_aux__239_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__239_formula; fulladder_halfadder_xor_aux__239_n ]
   ]


let def_fulladder_a__257 n =
  (*  fulladder_a__257(n)  =  true  *)
  let fulladder_a__257_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__257
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__257_term ]
let def_fulladder_b__259 n =
  (*  fulladder_b__259(n)  =  false  *)
  let fulladder_b__259_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__259
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__259_term ]
let def_fulladder_c__249 n =
  (*  fulladder_c__249(n)  =  false  *)
  let fulladder_c__249_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__249
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__249_term ]
let def_fulladder_c1__240 n =
  (*  fulladder_c1__240(n)  =  fulladder_halfadder_carry__241(n)  *)
  let fulladder_c1__240_term = Term.make_app fulladder_halfadder_carry__241
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__240
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__240_term ]
let def_fulladder_s1__242 n =
  (*  fulladder_s1__242(n)  =  fulladder_halfadder_sum__243(n)  *)
  let fulladder_s1__242_term = Term.make_app fulladder_halfadder_sum__243
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__242
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__242_term ]
let def_fulladder_c2__244 n =
  (*  fulladder_c2__244(n)  =  fulladder_halfadder_carry__245(n)  *)
  let fulladder_c2__244_term = Term.make_app fulladder_halfadder_carry__245
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__244
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__244_term ]
let def_fulladder_sum__105 n =
  (*  fulladder_sum__105(n)  =  fulladder_halfadder_sum__246(n)  *)
  let fulladder_sum__105_term = Term.make_app fulladder_halfadder_sum__246
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__105
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__105_term ]
let def_fulladder_carry__106 n =
  (*  fulladder_carry__106(n)  =  fulladder_aux__247(n)  *)
  let fulladder_carry__106_term = Term.make_app fulladder_aux__247
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__106
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__106_term ]
let def_fulladder_aux__247 n =
  (*  (fulladder_aux__247(n)  ==>  (fulladder_c1__240(n) || fulladder_c2__244(n)))  &&  ((fulladder_c1__240(n) || fulladder_c2__244(n))  ==>  fulladder_aux__247(n))  *)
  let fulladder_aux__247_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__247
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__247_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__240
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__244
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__247_n; fulladder_aux__247_formula ];
    Formula.make Formula.Imp [ fulladder_aux__247_formula; fulladder_aux__247_n ]
   ]


let def_fulladder_halfadder_a__248 n =
  (*  fulladder_halfadder_a__248(n)  =  fulladder_c__249(n)  *)
  let fulladder_halfadder_a__248_term = Term.make_app fulladder_c__249
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__248
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__248_term ]
let def_fulladder_halfadder_b__250 n =
  (*  fulladder_halfadder_b__250(n)  =  fulladder_s1__242(n)  *)
  let fulladder_halfadder_b__250_term = Term.make_app fulladder_s1__242
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__250
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__250_term ]
let def_fulladder_halfadder_sum__246 n =
  (*  fulladder_halfadder_sum__246(n)  =  fulladder_halfadder_xor_out__251(n)  *)
  let fulladder_halfadder_sum__246_term = Term.make_app fulladder_halfadder_xor_out__251
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__246
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__246_term ]
let def_fulladder_halfadder_carry__245 n =
  (*  fulladder_halfadder_carry__245(n)  =  fulladder_halfadder_aux__252(n)  *)
  let fulladder_halfadder_carry__245_term = Term.make_app fulladder_halfadder_aux__252
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__245
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__245_term ]
let def_fulladder_halfadder_aux__252 n =
  (*  (fulladder_halfadder_aux__252(n)  ==>  (fulladder_halfadder_a__248(n) && fulladder_halfadder_b__250(n)))  &&  ((fulladder_halfadder_a__248(n) && fulladder_halfadder_b__250(n))  ==>  fulladder_halfadder_aux__252(n))  *)
  let fulladder_halfadder_aux__252_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__252
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__252_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__248
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__250
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__252_n; fulladder_halfadder_aux__252_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__252_formula; fulladder_halfadder_aux__252_n ]
   ]


let def_fulladder_halfadder_xor_a__253 n =
  (*  fulladder_halfadder_xor_a__253(n)  =  fulladder_halfadder_a__248(n)  *)
  let fulladder_halfadder_xor_a__253_term = Term.make_app fulladder_halfadder_a__248
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__253
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__253_term ]
let def_fulladder_halfadder_xor_b__254 n =
  (*  fulladder_halfadder_xor_b__254(n)  =  fulladder_halfadder_b__250(n)  *)
  let fulladder_halfadder_xor_b__254_term = Term.make_app fulladder_halfadder_b__250
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__254
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__254_term ]
let def_fulladder_halfadder_xor_out__251 n =
  (*  fulladder_halfadder_xor_out__251(n)  =  (if (fulladder_halfadder_xor_a__253(n) && fulladder_halfadder_xor_b__254(n)) then false else fulladder_halfadder_xor_aux__255(n))  *)
  let fulladder_halfadder_xor_out__251_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__253
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__254
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__255
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__251
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__251_term ]
let def_fulladder_halfadder_xor_aux__255 n =
  (*  (fulladder_halfadder_xor_aux__255(n)  ==>  (fulladder_halfadder_xor_a__253(n) || fulladder_halfadder_xor_b__254(n)))  &&  ((fulladder_halfadder_xor_a__253(n) || fulladder_halfadder_xor_b__254(n))  ==>  fulladder_halfadder_xor_aux__255(n))  *)
  let fulladder_halfadder_xor_aux__255_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__255
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__255_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__253
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__254
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__255_n; fulladder_halfadder_xor_aux__255_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__255_formula; fulladder_halfadder_xor_aux__255_n ]
   ]


let def_fulladder_halfadder_a__256 n =
  (*  fulladder_halfadder_a__256(n)  =  fulladder_a__257(n)  *)
  let fulladder_halfadder_a__256_term = Term.make_app fulladder_a__257
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__256
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__256_term ]
let def_fulladder_halfadder_b__258 n =
  (*  fulladder_halfadder_b__258(n)  =  fulladder_b__259(n)  *)
  let fulladder_halfadder_b__258_term = Term.make_app fulladder_b__259
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__258
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__258_term ]
let def_fulladder_halfadder_sum__243 n =
  (*  fulladder_halfadder_sum__243(n)  =  fulladder_halfadder_xor_out__260(n)  *)
  let fulladder_halfadder_sum__243_term = Term.make_app fulladder_halfadder_xor_out__260
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__243
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__243_term ]
let def_fulladder_halfadder_carry__241 n =
  (*  fulladder_halfadder_carry__241(n)  =  fulladder_halfadder_aux__261(n)  *)
  let fulladder_halfadder_carry__241_term = Term.make_app fulladder_halfadder_aux__261
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__241
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__241_term ]
let def_fulladder_halfadder_aux__261 n =
  (*  (fulladder_halfadder_aux__261(n)  ==>  (fulladder_halfadder_a__256(n) && fulladder_halfadder_b__258(n)))  &&  ((fulladder_halfadder_a__256(n) && fulladder_halfadder_b__258(n))  ==>  fulladder_halfadder_aux__261(n))  *)
  let fulladder_halfadder_aux__261_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__261
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__261_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__256
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__258
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__261_n; fulladder_halfadder_aux__261_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__261_formula; fulladder_halfadder_aux__261_n ]
   ]


let def_fulladder_halfadder_xor_a__262 n =
  (*  fulladder_halfadder_xor_a__262(n)  =  fulladder_halfadder_a__256(n)  *)
  let fulladder_halfadder_xor_a__262_term = Term.make_app fulladder_halfadder_a__256
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__262
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__262_term ]
let def_fulladder_halfadder_xor_b__263 n =
  (*  fulladder_halfadder_xor_b__263(n)  =  fulladder_halfadder_b__258(n)  *)
  let fulladder_halfadder_xor_b__263_term = Term.make_app fulladder_halfadder_b__258
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__263
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__263_term ]
let def_fulladder_halfadder_xor_out__260 n =
  (*  fulladder_halfadder_xor_out__260(n)  =  (if (fulladder_halfadder_xor_a__262(n) && fulladder_halfadder_xor_b__263(n)) then false else fulladder_halfadder_xor_aux__264(n))  *)
  let fulladder_halfadder_xor_out__260_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__262
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__263
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__264
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__260
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__260_term ]
let def_fulladder_halfadder_xor_aux__264 n =
  (*  (fulladder_halfadder_xor_aux__264(n)  ==>  (fulladder_halfadder_xor_a__262(n) || fulladder_halfadder_xor_b__263(n)))  &&  ((fulladder_halfadder_xor_a__262(n) || fulladder_halfadder_xor_b__263(n))  ==>  fulladder_halfadder_xor_aux__264(n))  *)
  let fulladder_halfadder_xor_aux__264_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__264
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__264_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__262
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__263
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__264_n; fulladder_halfadder_xor_aux__264_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__264_formula; fulladder_halfadder_xor_aux__264_n ]
   ]


let def_fulladder_a__282 n =
  (*  fulladder_a__282(n)  =  false  *)
  let fulladder_a__282_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__282
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__282_term ]
let def_fulladder_b__284 n =
  (*  fulladder_b__284(n)  =  true  *)
  let fulladder_b__284_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__284
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__284_term ]
let def_fulladder_c__274 n =
  (*  fulladder_c__274(n)  =  false  *)
  let fulladder_c__274_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__274
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__274_term ]
let def_fulladder_c1__265 n =
  (*  fulladder_c1__265(n)  =  fulladder_halfadder_carry__266(n)  *)
  let fulladder_c1__265_term = Term.make_app fulladder_halfadder_carry__266
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__265
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__265_term ]
let def_fulladder_s1__267 n =
  (*  fulladder_s1__267(n)  =  fulladder_halfadder_sum__268(n)  *)
  let fulladder_s1__267_term = Term.make_app fulladder_halfadder_sum__268
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__267
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__267_term ]
let def_fulladder_c2__269 n =
  (*  fulladder_c2__269(n)  =  fulladder_halfadder_carry__270(n)  *)
  let fulladder_c2__269_term = Term.make_app fulladder_halfadder_carry__270
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__269
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__269_term ]
let def_fulladder_sum__103 n =
  (*  fulladder_sum__103(n)  =  fulladder_halfadder_sum__271(n)  *)
  let fulladder_sum__103_term = Term.make_app fulladder_halfadder_sum__271
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__103
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__103_term ]
let def_fulladder_carry__104 n =
  (*  fulladder_carry__104(n)  =  fulladder_aux__272(n)  *)
  let fulladder_carry__104_term = Term.make_app fulladder_aux__272
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__104
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__104_term ]
let def_fulladder_aux__272 n =
  (*  (fulladder_aux__272(n)  ==>  (fulladder_c1__265(n) || fulladder_c2__269(n)))  &&  ((fulladder_c1__265(n) || fulladder_c2__269(n))  ==>  fulladder_aux__272(n))  *)
  let fulladder_aux__272_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__272
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__272_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__265
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__269
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__272_n; fulladder_aux__272_formula ];
    Formula.make Formula.Imp [ fulladder_aux__272_formula; fulladder_aux__272_n ]
   ]


let def_fulladder_halfadder_a__273 n =
  (*  fulladder_halfadder_a__273(n)  =  fulladder_c__274(n)  *)
  let fulladder_halfadder_a__273_term = Term.make_app fulladder_c__274
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__273
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__273_term ]
let def_fulladder_halfadder_b__275 n =
  (*  fulladder_halfadder_b__275(n)  =  fulladder_s1__267(n)  *)
  let fulladder_halfadder_b__275_term = Term.make_app fulladder_s1__267
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__275
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__275_term ]
let def_fulladder_halfadder_sum__271 n =
  (*  fulladder_halfadder_sum__271(n)  =  fulladder_halfadder_xor_out__276(n)  *)
  let fulladder_halfadder_sum__271_term = Term.make_app fulladder_halfadder_xor_out__276
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__271
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__271_term ]
let def_fulladder_halfadder_carry__270 n =
  (*  fulladder_halfadder_carry__270(n)  =  fulladder_halfadder_aux__277(n)  *)
  let fulladder_halfadder_carry__270_term = Term.make_app fulladder_halfadder_aux__277
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__270
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__270_term ]
let def_fulladder_halfadder_aux__277 n =
  (*  (fulladder_halfadder_aux__277(n)  ==>  (fulladder_halfadder_a__273(n) && fulladder_halfadder_b__275(n)))  &&  ((fulladder_halfadder_a__273(n) && fulladder_halfadder_b__275(n))  ==>  fulladder_halfadder_aux__277(n))  *)
  let fulladder_halfadder_aux__277_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__277
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__277_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__273
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__275
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__277_n; fulladder_halfadder_aux__277_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__277_formula; fulladder_halfadder_aux__277_n ]
   ]


let def_fulladder_halfadder_xor_a__278 n =
  (*  fulladder_halfadder_xor_a__278(n)  =  fulladder_halfadder_a__273(n)  *)
  let fulladder_halfadder_xor_a__278_term = Term.make_app fulladder_halfadder_a__273
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__278
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__278_term ]
let def_fulladder_halfadder_xor_b__279 n =
  (*  fulladder_halfadder_xor_b__279(n)  =  fulladder_halfadder_b__275(n)  *)
  let fulladder_halfadder_xor_b__279_term = Term.make_app fulladder_halfadder_b__275
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__279
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__279_term ]
let def_fulladder_halfadder_xor_out__276 n =
  (*  fulladder_halfadder_xor_out__276(n)  =  (if (fulladder_halfadder_xor_a__278(n) && fulladder_halfadder_xor_b__279(n)) then false else fulladder_halfadder_xor_aux__280(n))  *)
  let fulladder_halfadder_xor_out__276_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__278
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__279
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__280
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__276
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__276_term ]
let def_fulladder_halfadder_xor_aux__280 n =
  (*  (fulladder_halfadder_xor_aux__280(n)  ==>  (fulladder_halfadder_xor_a__278(n) || fulladder_halfadder_xor_b__279(n)))  &&  ((fulladder_halfadder_xor_a__278(n) || fulladder_halfadder_xor_b__279(n))  ==>  fulladder_halfadder_xor_aux__280(n))  *)
  let fulladder_halfadder_xor_aux__280_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__280
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__280_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__278
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__279
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__280_n; fulladder_halfadder_xor_aux__280_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__280_formula; fulladder_halfadder_xor_aux__280_n ]
   ]


let def_fulladder_halfadder_a__281 n =
  (*  fulladder_halfadder_a__281(n)  =  fulladder_a__282(n)  *)
  let fulladder_halfadder_a__281_term = Term.make_app fulladder_a__282
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__281
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__281_term ]
let def_fulladder_halfadder_b__283 n =
  (*  fulladder_halfadder_b__283(n)  =  fulladder_b__284(n)  *)
  let fulladder_halfadder_b__283_term = Term.make_app fulladder_b__284
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__283
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__283_term ]
let def_fulladder_halfadder_sum__268 n =
  (*  fulladder_halfadder_sum__268(n)  =  fulladder_halfadder_xor_out__285(n)  *)
  let fulladder_halfadder_sum__268_term = Term.make_app fulladder_halfadder_xor_out__285
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__268
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__268_term ]
let def_fulladder_halfadder_carry__266 n =
  (*  fulladder_halfadder_carry__266(n)  =  fulladder_halfadder_aux__286(n)  *)
  let fulladder_halfadder_carry__266_term = Term.make_app fulladder_halfadder_aux__286
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__266
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__266_term ]
let def_fulladder_halfadder_aux__286 n =
  (*  (fulladder_halfadder_aux__286(n)  ==>  (fulladder_halfadder_a__281(n) && fulladder_halfadder_b__283(n)))  &&  ((fulladder_halfadder_a__281(n) && fulladder_halfadder_b__283(n))  ==>  fulladder_halfadder_aux__286(n))  *)
  let fulladder_halfadder_aux__286_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__286
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__286_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__281
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__283
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__286_n; fulladder_halfadder_aux__286_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__286_formula; fulladder_halfadder_aux__286_n ]
   ]


let def_fulladder_halfadder_xor_a__287 n =
  (*  fulladder_halfadder_xor_a__287(n)  =  fulladder_halfadder_a__281(n)  *)
  let fulladder_halfadder_xor_a__287_term = Term.make_app fulladder_halfadder_a__281
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__287
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__287_term ]
let def_fulladder_halfadder_xor_b__288 n =
  (*  fulladder_halfadder_xor_b__288(n)  =  fulladder_halfadder_b__283(n)  *)
  let fulladder_halfadder_xor_b__288_term = Term.make_app fulladder_halfadder_b__283
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__288
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__288_term ]
let def_fulladder_halfadder_xor_out__285 n =
  (*  fulladder_halfadder_xor_out__285(n)  =  (if (fulladder_halfadder_xor_a__287(n) && fulladder_halfadder_xor_b__288(n)) then false else fulladder_halfadder_xor_aux__289(n))  *)
  let fulladder_halfadder_xor_out__285_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__287
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__288
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__289
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__285
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__285_term ]
let def_fulladder_halfadder_xor_aux__289 n =
  (*  (fulladder_halfadder_xor_aux__289(n)  ==>  (fulladder_halfadder_xor_a__287(n) || fulladder_halfadder_xor_b__288(n)))  &&  ((fulladder_halfadder_xor_a__287(n) || fulladder_halfadder_xor_b__288(n))  ==>  fulladder_halfadder_xor_aux__289(n))  *)
  let fulladder_halfadder_xor_aux__289_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__289
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__289_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__287
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__288
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__289_n; fulladder_halfadder_xor_aux__289_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__289_formula; fulladder_halfadder_xor_aux__289_n ]
   ]


let def_fulladder_a__307 n =
  (*  fulladder_a__307(n)  =  false  *)
  let fulladder_a__307_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__307
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__307_term ]
let def_fulladder_b__309 n =
  (*  fulladder_b__309(n)  =  false  *)
  let fulladder_b__309_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__309
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__309_term ]
let def_fulladder_c__299 n =
  (*  fulladder_c__299(n)  =  true  *)
  let fulladder_c__299_term = Term.t_true
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__299
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__299_term ]
let def_fulladder_c1__290 n =
  (*  fulladder_c1__290(n)  =  fulladder_halfadder_carry__291(n)  *)
  let fulladder_c1__290_term = Term.make_app fulladder_halfadder_carry__291
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__290
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__290_term ]
let def_fulladder_s1__292 n =
  (*  fulladder_s1__292(n)  =  fulladder_halfadder_sum__293(n)  *)
  let fulladder_s1__292_term = Term.make_app fulladder_halfadder_sum__293
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__292
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__292_term ]
let def_fulladder_c2__294 n =
  (*  fulladder_c2__294(n)  =  fulladder_halfadder_carry__295(n)  *)
  let fulladder_c2__294_term = Term.make_app fulladder_halfadder_carry__295
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__294
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__294_term ]
let def_fulladder_sum__101 n =
  (*  fulladder_sum__101(n)  =  fulladder_halfadder_sum__296(n)  *)
  let fulladder_sum__101_term = Term.make_app fulladder_halfadder_sum__296
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__101
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__101_term ]
let def_fulladder_carry__102 n =
  (*  fulladder_carry__102(n)  =  fulladder_aux__297(n)  *)
  let fulladder_carry__102_term = Term.make_app fulladder_aux__297
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__102
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__102_term ]
let def_fulladder_aux__297 n =
  (*  (fulladder_aux__297(n)  ==>  (fulladder_c1__290(n) || fulladder_c2__294(n)))  &&  ((fulladder_c1__290(n) || fulladder_c2__294(n))  ==>  fulladder_aux__297(n))  *)
  let fulladder_aux__297_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__297
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__297_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__290
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__294
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__297_n; fulladder_aux__297_formula ];
    Formula.make Formula.Imp [ fulladder_aux__297_formula; fulladder_aux__297_n ]
   ]


let def_fulladder_halfadder_a__298 n =
  (*  fulladder_halfadder_a__298(n)  =  fulladder_c__299(n)  *)
  let fulladder_halfadder_a__298_term = Term.make_app fulladder_c__299
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__298
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__298_term ]
let def_fulladder_halfadder_b__300 n =
  (*  fulladder_halfadder_b__300(n)  =  fulladder_s1__292(n)  *)
  let fulladder_halfadder_b__300_term = Term.make_app fulladder_s1__292
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__300
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__300_term ]
let def_fulladder_halfadder_sum__296 n =
  (*  fulladder_halfadder_sum__296(n)  =  fulladder_halfadder_xor_out__301(n)  *)
  let fulladder_halfadder_sum__296_term = Term.make_app fulladder_halfadder_xor_out__301
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__296
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__296_term ]
let def_fulladder_halfadder_carry__295 n =
  (*  fulladder_halfadder_carry__295(n)  =  fulladder_halfadder_aux__302(n)  *)
  let fulladder_halfadder_carry__295_term = Term.make_app fulladder_halfadder_aux__302
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__295
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__295_term ]
let def_fulladder_halfadder_aux__302 n =
  (*  (fulladder_halfadder_aux__302(n)  ==>  (fulladder_halfadder_a__298(n) && fulladder_halfadder_b__300(n)))  &&  ((fulladder_halfadder_a__298(n) && fulladder_halfadder_b__300(n))  ==>  fulladder_halfadder_aux__302(n))  *)
  let fulladder_halfadder_aux__302_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__302
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__302_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__298
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__300
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__302_n; fulladder_halfadder_aux__302_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__302_formula; fulladder_halfadder_aux__302_n ]
   ]


let def_fulladder_halfadder_xor_a__303 n =
  (*  fulladder_halfadder_xor_a__303(n)  =  fulladder_halfadder_a__298(n)  *)
  let fulladder_halfadder_xor_a__303_term = Term.make_app fulladder_halfadder_a__298
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__303
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__303_term ]
let def_fulladder_halfadder_xor_b__304 n =
  (*  fulladder_halfadder_xor_b__304(n)  =  fulladder_halfadder_b__300(n)  *)
  let fulladder_halfadder_xor_b__304_term = Term.make_app fulladder_halfadder_b__300
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__304
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__304_term ]
let def_fulladder_halfadder_xor_out__301 n =
  (*  fulladder_halfadder_xor_out__301(n)  =  (if (fulladder_halfadder_xor_a__303(n) && fulladder_halfadder_xor_b__304(n)) then false else fulladder_halfadder_xor_aux__305(n))  *)
  let fulladder_halfadder_xor_out__301_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__303
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__304
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__305
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__301
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__301_term ]
let def_fulladder_halfadder_xor_aux__305 n =
  (*  (fulladder_halfadder_xor_aux__305(n)  ==>  (fulladder_halfadder_xor_a__303(n) || fulladder_halfadder_xor_b__304(n)))  &&  ((fulladder_halfadder_xor_a__303(n) || fulladder_halfadder_xor_b__304(n))  ==>  fulladder_halfadder_xor_aux__305(n))  *)
  let fulladder_halfadder_xor_aux__305_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__305
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__305_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__303
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__304
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__305_n; fulladder_halfadder_xor_aux__305_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__305_formula; fulladder_halfadder_xor_aux__305_n ]
   ]


let def_fulladder_halfadder_a__306 n =
  (*  fulladder_halfadder_a__306(n)  =  fulladder_a__307(n)  *)
  let fulladder_halfadder_a__306_term = Term.make_app fulladder_a__307
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__306
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__306_term ]
let def_fulladder_halfadder_b__308 n =
  (*  fulladder_halfadder_b__308(n)  =  fulladder_b__309(n)  *)
  let fulladder_halfadder_b__308_term = Term.make_app fulladder_b__309
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__308
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__308_term ]
let def_fulladder_halfadder_sum__293 n =
  (*  fulladder_halfadder_sum__293(n)  =  fulladder_halfadder_xor_out__310(n)  *)
  let fulladder_halfadder_sum__293_term = Term.make_app fulladder_halfadder_xor_out__310
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__293
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__293_term ]
let def_fulladder_halfadder_carry__291 n =
  (*  fulladder_halfadder_carry__291(n)  =  fulladder_halfadder_aux__311(n)  *)
  let fulladder_halfadder_carry__291_term = Term.make_app fulladder_halfadder_aux__311
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__291
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__291_term ]
let def_fulladder_halfadder_aux__311 n =
  (*  (fulladder_halfadder_aux__311(n)  ==>  (fulladder_halfadder_a__306(n) && fulladder_halfadder_b__308(n)))  &&  ((fulladder_halfadder_a__306(n) && fulladder_halfadder_b__308(n))  ==>  fulladder_halfadder_aux__311(n))  *)
  let fulladder_halfadder_aux__311_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__311
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__311_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__306
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__308
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__311_n; fulladder_halfadder_aux__311_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__311_formula; fulladder_halfadder_aux__311_n ]
   ]


let def_fulladder_halfadder_xor_a__312 n =
  (*  fulladder_halfadder_xor_a__312(n)  =  fulladder_halfadder_a__306(n)  *)
  let fulladder_halfadder_xor_a__312_term = Term.make_app fulladder_halfadder_a__306
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__312
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__312_term ]
let def_fulladder_halfadder_xor_b__313 n =
  (*  fulladder_halfadder_xor_b__313(n)  =  fulladder_halfadder_b__308(n)  *)
  let fulladder_halfadder_xor_b__313_term = Term.make_app fulladder_halfadder_b__308
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__313
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__313_term ]
let def_fulladder_halfadder_xor_out__310 n =
  (*  fulladder_halfadder_xor_out__310(n)  =  (if (fulladder_halfadder_xor_a__312(n) && fulladder_halfadder_xor_b__313(n)) then false else fulladder_halfadder_xor_aux__314(n))  *)
  let fulladder_halfadder_xor_out__310_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__312
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__313
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__314
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__310
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__310_term ]
let def_fulladder_halfadder_xor_aux__314 n =
  (*  (fulladder_halfadder_xor_aux__314(n)  ==>  (fulladder_halfadder_xor_a__312(n) || fulladder_halfadder_xor_b__313(n)))  &&  ((fulladder_halfadder_xor_a__312(n) || fulladder_halfadder_xor_b__313(n))  ==>  fulladder_halfadder_xor_aux__314(n))  *)
  let fulladder_halfadder_xor_aux__314_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__314
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__314_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__312
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__313
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__314_n; fulladder_halfadder_xor_aux__314_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__314_formula; fulladder_halfadder_xor_aux__314_n ]
   ]


let def_fulladder_a__332 n =
  (*  fulladder_a__332(n)  =  false  *)
  let fulladder_a__332_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_a__332
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_a__332_term ]
let def_fulladder_b__334 n =
  (*  fulladder_b__334(n)  =  false  *)
  let fulladder_b__334_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_b__334
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_b__334_term ]
let def_fulladder_c__324 n =
  (*  fulladder_c__324(n)  =  false  *)
  let fulladder_c__324_term = Term.t_false
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c__324
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c__324_term ]
let def_fulladder_c1__315 n =
  (*  fulladder_c1__315(n)  =  fulladder_halfadder_carry__316(n)  *)
  let fulladder_c1__315_term = Term.make_app fulladder_halfadder_carry__316
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__315
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c1__315_term ]
let def_fulladder_s1__317 n =
  (*  fulladder_s1__317(n)  =  fulladder_halfadder_sum__318(n)  *)
  let fulladder_s1__317_term = Term.make_app fulladder_halfadder_sum__318
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_s1__317
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_s1__317_term ]
let def_fulladder_c2__319 n =
  (*  fulladder_c2__319(n)  =  fulladder_halfadder_carry__320(n)  *)
  let fulladder_c2__319_term = Term.make_app fulladder_halfadder_carry__320
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__319
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_c2__319_term ]
let def_fulladder_sum__99 n =
  (*  fulladder_sum__99(n)  =  fulladder_halfadder_sum__321(n)  *)
  let fulladder_sum__99_term = Term.make_app fulladder_halfadder_sum__321
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_sum__99
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_sum__99_term ]
let def_fulladder_carry__100 n =
  (*  fulladder_carry__100(n)  =  fulladder_aux__322(n)  *)
  let fulladder_carry__100_term = Term.make_app fulladder_aux__322
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_carry__100
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_carry__100_term ]
let def_fulladder_aux__322 n =
  (*  (fulladder_aux__322(n)  ==>  (fulladder_c1__315(n) || fulladder_c2__319(n)))  &&  ((fulladder_c1__315(n) || fulladder_c2__319(n))  ==>  fulladder_aux__322(n))  *)
  let fulladder_aux__322_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_aux__322
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_aux__322_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_c1__315
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_c2__319
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_aux__322_n; fulladder_aux__322_formula ];
    Formula.make Formula.Imp [ fulladder_aux__322_formula; fulladder_aux__322_n ]
   ]


let def_fulladder_halfadder_a__323 n =
  (*  fulladder_halfadder_a__323(n)  =  fulladder_c__324(n)  *)
  let fulladder_halfadder_a__323_term = Term.make_app fulladder_c__324
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__323
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__323_term ]
let def_fulladder_halfadder_b__325 n =
  (*  fulladder_halfadder_b__325(n)  =  fulladder_s1__317(n)  *)
  let fulladder_halfadder_b__325_term = Term.make_app fulladder_s1__317
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__325
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__325_term ]
let def_fulladder_halfadder_sum__321 n =
  (*  fulladder_halfadder_sum__321(n)  =  fulladder_halfadder_xor_out__326(n)  *)
  let fulladder_halfadder_sum__321_term = Term.make_app fulladder_halfadder_xor_out__326
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__321
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__321_term ]
let def_fulladder_halfadder_carry__320 n =
  (*  fulladder_halfadder_carry__320(n)  =  fulladder_halfadder_aux__327(n)  *)
  let fulladder_halfadder_carry__320_term = Term.make_app fulladder_halfadder_aux__327
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__320
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__320_term ]
let def_fulladder_halfadder_aux__327 n =
  (*  (fulladder_halfadder_aux__327(n)  ==>  (fulladder_halfadder_a__323(n) && fulladder_halfadder_b__325(n)))  &&  ((fulladder_halfadder_a__323(n) && fulladder_halfadder_b__325(n))  ==>  fulladder_halfadder_aux__327(n))  *)
  let fulladder_halfadder_aux__327_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__327
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__327_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__323
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__325
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__327_n; fulladder_halfadder_aux__327_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__327_formula; fulladder_halfadder_aux__327_n ]
   ]


let def_fulladder_halfadder_xor_a__328 n =
  (*  fulladder_halfadder_xor_a__328(n)  =  fulladder_halfadder_a__323(n)  *)
  let fulladder_halfadder_xor_a__328_term = Term.make_app fulladder_halfadder_a__323
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__328
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__328_term ]
let def_fulladder_halfadder_xor_b__329 n =
  (*  fulladder_halfadder_xor_b__329(n)  =  fulladder_halfadder_b__325(n)  *)
  let fulladder_halfadder_xor_b__329_term = Term.make_app fulladder_halfadder_b__325
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__329
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__329_term ]
let def_fulladder_halfadder_xor_out__326 n =
  (*  fulladder_halfadder_xor_out__326(n)  =  (if (fulladder_halfadder_xor_a__328(n) && fulladder_halfadder_xor_b__329(n)) then false else fulladder_halfadder_xor_aux__330(n))  *)
  let fulladder_halfadder_xor_out__326_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__328
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__329
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__330
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__326
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__326_term ]
let def_fulladder_halfadder_xor_aux__330 n =
  (*  (fulladder_halfadder_xor_aux__330(n)  ==>  (fulladder_halfadder_xor_a__328(n) || fulladder_halfadder_xor_b__329(n)))  &&  ((fulladder_halfadder_xor_a__328(n) || fulladder_halfadder_xor_b__329(n))  ==>  fulladder_halfadder_xor_aux__330(n))  *)
  let fulladder_halfadder_xor_aux__330_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__330
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__330_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__328
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__329
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__330_n; fulladder_halfadder_xor_aux__330_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__330_formula; fulladder_halfadder_xor_aux__330_n ]
   ]


let def_fulladder_halfadder_a__331 n =
  (*  fulladder_halfadder_a__331(n)  =  fulladder_a__332(n)  *)
  let fulladder_halfadder_a__331_term = Term.make_app fulladder_a__332
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__331
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_a__331_term ]
let def_fulladder_halfadder_b__333 n =
  (*  fulladder_halfadder_b__333(n)  =  fulladder_b__334(n)  *)
  let fulladder_halfadder_b__333_term = Term.make_app fulladder_b__334
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__333
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_b__333_term ]
let def_fulladder_halfadder_sum__318 n =
  (*  fulladder_halfadder_sum__318(n)  =  fulladder_halfadder_xor_out__335(n)  *)
  let fulladder_halfadder_sum__318_term = Term.make_app fulladder_halfadder_xor_out__335
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_sum__318
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_sum__318_term ]
let def_fulladder_halfadder_carry__316 n =
  (*  fulladder_halfadder_carry__316(n)  =  fulladder_halfadder_aux__336(n)  *)
  let fulladder_halfadder_carry__316_term = Term.make_app fulladder_halfadder_aux__336
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_carry__316
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_carry__316_term ]
let def_fulladder_halfadder_aux__336 n =
  (*  (fulladder_halfadder_aux__336(n)  ==>  (fulladder_halfadder_a__331(n) && fulladder_halfadder_b__333(n)))  &&  ((fulladder_halfadder_a__331(n) && fulladder_halfadder_b__333(n))  ==>  fulladder_halfadder_aux__336(n))  *)
  let fulladder_halfadder_aux__336_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_aux__336
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_aux__336_formula = Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_a__331
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_b__333
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_aux__336_n; fulladder_halfadder_aux__336_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_aux__336_formula; fulladder_halfadder_aux__336_n ]
   ]


let def_fulladder_halfadder_xor_a__337 n =
  (*  fulladder_halfadder_xor_a__337(n)  =  fulladder_halfadder_a__331(n)  *)
  let fulladder_halfadder_xor_a__337_term = Term.make_app fulladder_halfadder_a__331
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__337
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_a__337_term ]
let def_fulladder_halfadder_xor_b__338 n =
  (*  fulladder_halfadder_xor_b__338(n)  =  fulladder_halfadder_b__333(n)  *)
  let fulladder_halfadder_xor_b__338_term = Term.make_app fulladder_halfadder_b__333
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__338
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_b__338_term ]
let def_fulladder_halfadder_xor_out__335 n =
  (*  fulladder_halfadder_xor_out__335(n)  =  (if (fulladder_halfadder_xor_a__337(n) && fulladder_halfadder_xor_b__338(n)) then false else fulladder_halfadder_xor_aux__339(n))  *)
  let fulladder_halfadder_xor_out__335_term = Term.make_ite
    (Formula.make Formula.And [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__337
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__338
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      ; Term.t_true ] ])
    (Term.t_false)
    (Term.make_app fulladder_halfadder_xor_aux__339
      [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
      )
    
  in
  Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_out__335
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; fulladder_halfadder_xor_out__335_term ]
let def_fulladder_halfadder_xor_aux__339 n =
  (*  (fulladder_halfadder_xor_aux__339(n)  ==>  (fulladder_halfadder_xor_a__337(n) || fulladder_halfadder_xor_b__338(n)))  &&  ((fulladder_halfadder_xor_a__337(n) || fulladder_halfadder_xor_b__338(n))  ==>  fulladder_halfadder_xor_aux__339(n))  *)
  let fulladder_halfadder_xor_aux__339_n = Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_aux__339
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
  in
  let fulladder_halfadder_xor_aux__339_formula = Formula.make Formula.Or [ Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_a__337
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]; Formula.make_lit Formula.Eq [ Term.make_app fulladder_halfadder_xor_b__338
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ] ]
  in
  Formula.make Formula.And [
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__339_n; fulladder_halfadder_xor_aux__339_formula ];
    Formula.make Formula.Imp [ fulladder_halfadder_xor_aux__339_formula; fulladder_halfadder_xor_aux__339_n ]
   ]


let delta_incr n = Formula.make Formula.And [ def_c0__30 n; def_s0__22 n; def_b0__38 n; def_c1__31 n; def_s1__23 n; def_b1__39 n; def_c2__32 n; def_s2__24 n; def_b2__40 n; def_c3__33 n; def_s3__25 n; def_b3__41 n; def_c4__34 n; def_s4__26 n; def_b4__42 n; def_c5__35 n; def_s5__27 n; def_b5__43 n; def_c6__36 n; def_s6__28 n; def_b6__44 n; def_c7__37 n; def_s7__29 n; def_b7__45 n; def_ok__21 n; def_aux__98 n; def_aux__97 n; def_aux__96 n; def_aux__95 n; def_aux__94 n; def_aux__93 n; def_aux__92 n; def_aux__91 n; def_aux__90 n; def_fulladder_a__157 n; def_fulladder_b__159 n; def_fulladder_c__149 n; def_fulladder_c1__140 n; def_fulladder_s1__142 n; def_fulladder_c2__144 n; def_fulladder_sum__113 n; def_fulladder_carry__114 n; def_fulladder_aux__147 n; def_fulladder_halfadder_a__148 n; def_fulladder_halfadder_b__150 n; def_fulladder_halfadder_sum__146 n; def_fulladder_halfadder_carry__145 n; def_fulladder_halfadder_aux__152 n; def_fulladder_halfadder_xor_a__153 n; def_fulladder_halfadder_xor_b__154 n; def_fulladder_halfadder_xor_out__151 n; def_fulladder_halfadder_xor_aux__155 n; def_fulladder_halfadder_a__156 n; def_fulladder_halfadder_b__158 n; def_fulladder_halfadder_sum__143 n; def_fulladder_halfadder_carry__141 n; def_fulladder_halfadder_aux__161 n; def_fulladder_halfadder_xor_a__162 n; def_fulladder_halfadder_xor_b__163 n; def_fulladder_halfadder_xor_out__160 n; def_fulladder_halfadder_xor_aux__164 n; def_fulladder_a__182 n; def_fulladder_b__184 n; def_fulladder_c__174 n; def_fulladder_c1__165 n; def_fulladder_s1__167 n; def_fulladder_c2__169 n; def_fulladder_sum__111 n; def_fulladder_carry__112 n; def_fulladder_aux__172 n; def_fulladder_halfadder_a__173 n; def_fulladder_halfadder_b__175 n; def_fulladder_halfadder_sum__171 n; def_fulladder_halfadder_carry__170 n; def_fulladder_halfadder_aux__177 n; def_fulladder_halfadder_xor_a__178 n; def_fulladder_halfadder_xor_b__179 n; def_fulladder_halfadder_xor_out__176 n; def_fulladder_halfadder_xor_aux__180 n; def_fulladder_halfadder_a__181 n; def_fulladder_halfadder_b__183 n; def_fulladder_halfadder_sum__168 n; def_fulladder_halfadder_carry__166 n; def_fulladder_halfadder_aux__186 n; def_fulladder_halfadder_xor_a__187 n; def_fulladder_halfadder_xor_b__188 n; def_fulladder_halfadder_xor_out__185 n; def_fulladder_halfadder_xor_aux__189 n; def_fulladder_a__207 n; def_fulladder_b__209 n; def_fulladder_c__199 n; def_fulladder_c1__190 n; def_fulladder_s1__192 n; def_fulladder_c2__194 n; def_fulladder_sum__109 n; def_fulladder_carry__110 n; def_fulladder_aux__197 n; def_fulladder_halfadder_a__198 n; def_fulladder_halfadder_b__200 n; def_fulladder_halfadder_sum__196 n; def_fulladder_halfadder_carry__195 n; def_fulladder_halfadder_aux__202 n; def_fulladder_halfadder_xor_a__203 n; def_fulladder_halfadder_xor_b__204 n; def_fulladder_halfadder_xor_out__201 n; def_fulladder_halfadder_xor_aux__205 n; def_fulladder_halfadder_a__206 n; def_fulladder_halfadder_b__208 n; def_fulladder_halfadder_sum__193 n; def_fulladder_halfadder_carry__191 n; def_fulladder_halfadder_aux__211 n; def_fulladder_halfadder_xor_a__212 n; def_fulladder_halfadder_xor_b__213 n; def_fulladder_halfadder_xor_out__210 n; def_fulladder_halfadder_xor_aux__214 n; def_fulladder_a__232 n; def_fulladder_b__234 n; def_fulladder_c__224 n; def_fulladder_c1__215 n; def_fulladder_s1__217 n; def_fulladder_c2__219 n; def_fulladder_sum__107 n; def_fulladder_carry__108 n; def_fulladder_aux__222 n; def_fulladder_halfadder_a__223 n; def_fulladder_halfadder_b__225 n; def_fulladder_halfadder_sum__221 n; def_fulladder_halfadder_carry__220 n; def_fulladder_halfadder_aux__227 n; def_fulladder_halfadder_xor_a__228 n; def_fulladder_halfadder_xor_b__229 n; def_fulladder_halfadder_xor_out__226 n; def_fulladder_halfadder_xor_aux__230 n; def_fulladder_halfadder_a__231 n; def_fulladder_halfadder_b__233 n; def_fulladder_halfadder_sum__218 n; def_fulladder_halfadder_carry__216 n; def_fulladder_halfadder_aux__236 n; def_fulladder_halfadder_xor_a__237 n; def_fulladder_halfadder_xor_b__238 n; def_fulladder_halfadder_xor_out__235 n; def_fulladder_halfadder_xor_aux__239 n; def_fulladder_a__257 n; def_fulladder_b__259 n; def_fulladder_c__249 n; def_fulladder_c1__240 n; def_fulladder_s1__242 n; def_fulladder_c2__244 n; def_fulladder_sum__105 n; def_fulladder_carry__106 n; def_fulladder_aux__247 n; def_fulladder_halfadder_a__248 n; def_fulladder_halfadder_b__250 n; def_fulladder_halfadder_sum__246 n; def_fulladder_halfadder_carry__245 n; def_fulladder_halfadder_aux__252 n; def_fulladder_halfadder_xor_a__253 n; def_fulladder_halfadder_xor_b__254 n; def_fulladder_halfadder_xor_out__251 n; def_fulladder_halfadder_xor_aux__255 n; def_fulladder_halfadder_a__256 n; def_fulladder_halfadder_b__258 n; def_fulladder_halfadder_sum__243 n; def_fulladder_halfadder_carry__241 n; def_fulladder_halfadder_aux__261 n; def_fulladder_halfadder_xor_a__262 n; def_fulladder_halfadder_xor_b__263 n; def_fulladder_halfadder_xor_out__260 n; def_fulladder_halfadder_xor_aux__264 n; def_fulladder_a__282 n; def_fulladder_b__284 n; def_fulladder_c__274 n; def_fulladder_c1__265 n; def_fulladder_s1__267 n; def_fulladder_c2__269 n; def_fulladder_sum__103 n; def_fulladder_carry__104 n; def_fulladder_aux__272 n; def_fulladder_halfadder_a__273 n; def_fulladder_halfadder_b__275 n; def_fulladder_halfadder_sum__271 n; def_fulladder_halfadder_carry__270 n; def_fulladder_halfadder_aux__277 n; def_fulladder_halfadder_xor_a__278 n; def_fulladder_halfadder_xor_b__279 n; def_fulladder_halfadder_xor_out__276 n; def_fulladder_halfadder_xor_aux__280 n; def_fulladder_halfadder_a__281 n; def_fulladder_halfadder_b__283 n; def_fulladder_halfadder_sum__268 n; def_fulladder_halfadder_carry__266 n; def_fulladder_halfadder_aux__286 n; def_fulladder_halfadder_xor_a__287 n; def_fulladder_halfadder_xor_b__288 n; def_fulladder_halfadder_xor_out__285 n; def_fulladder_halfadder_xor_aux__289 n; def_fulladder_a__307 n; def_fulladder_b__309 n; def_fulladder_c__299 n; def_fulladder_c1__290 n; def_fulladder_s1__292 n; def_fulladder_c2__294 n; def_fulladder_sum__101 n; def_fulladder_carry__102 n; def_fulladder_aux__297 n; def_fulladder_halfadder_a__298 n; def_fulladder_halfadder_b__300 n; def_fulladder_halfadder_sum__296 n; def_fulladder_halfadder_carry__295 n; def_fulladder_halfadder_aux__302 n; def_fulladder_halfadder_xor_a__303 n; def_fulladder_halfadder_xor_b__304 n; def_fulladder_halfadder_xor_out__301 n; def_fulladder_halfadder_xor_aux__305 n; def_fulladder_halfadder_a__306 n; def_fulladder_halfadder_b__308 n; def_fulladder_halfadder_sum__293 n; def_fulladder_halfadder_carry__291 n; def_fulladder_halfadder_aux__311 n; def_fulladder_halfadder_xor_a__312 n; def_fulladder_halfadder_xor_b__313 n; def_fulladder_halfadder_xor_out__310 n; def_fulladder_halfadder_xor_aux__314 n; def_fulladder_a__332 n; def_fulladder_b__334 n; def_fulladder_c__324 n; def_fulladder_c1__315 n; def_fulladder_s1__317 n; def_fulladder_c2__319 n; def_fulladder_sum__99 n; def_fulladder_carry__100 n; def_fulladder_aux__322 n; def_fulladder_halfadder_a__323 n; def_fulladder_halfadder_b__325 n; def_fulladder_halfadder_sum__321 n; def_fulladder_halfadder_carry__320 n; def_fulladder_halfadder_aux__327 n; def_fulladder_halfadder_xor_a__328 n; def_fulladder_halfadder_xor_b__329 n; def_fulladder_halfadder_xor_out__326 n; def_fulladder_halfadder_xor_aux__330 n; def_fulladder_halfadder_a__331 n; def_fulladder_halfadder_b__333 n; def_fulladder_halfadder_sum__318 n; def_fulladder_halfadder_carry__316 n; def_fulladder_halfadder_aux__336 n; def_fulladder_halfadder_xor_a__337 n; def_fulladder_halfadder_xor_b__338 n; def_fulladder_halfadder_xor_out__335 n; def_fulladder_halfadder_xor_aux__339 n ]
let p_incr n = Formula.make_lit Formula.Eq [ Term.make_app ok__21
    [ Term.make_arith Term.Minus n (Term.make_int (Num.Int 0)) ]
    ; Term.t_true ]
let () = kind delta_incr p_incr

